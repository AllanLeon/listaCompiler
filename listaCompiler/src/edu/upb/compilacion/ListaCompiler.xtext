grammar edu.upb.compilacion.ListaCompiler with org.eclipse.xtext.common.Terminals

generate listaCompiler "http://www.upb.edu/compilacion/ListaCompiler"

Lista:
	lines+=(Evaluation | FunctionDefinition)+;

Evaluation:
	"?" return=Expression ";"
;

FunctionDefinition: name=IDFUNCVAR "(" (params+=IDFUNCVAR (',' params+=IDFUNCVAR)*)? ")"
	"=" return=Expression ";"
;

Expression:
	//IntExpression //| BoolExpression | StringExpression |IntList
	//args+=Term (operators+=Operator args+=Term)*
	FirstLevelExp
;

//Term: DataType | FunctionCall | IfControlFlow;

FirstLevelExp:
	first=SecondLevelExp ((">" | "<" | "&" | "|" | "==") second=FirstLevelExp)?
;

SecondLevelExp:
	first=ThirdLevelExp (("+" | "-" | "++") second=SecondLevelExp)?
;

ThirdLevelExp:
	first=Term (("*" | "/") second=ThirdLevelExp)?
;

Term:
	MyInteger | MyString | BoolTerm | MyVariable | IntList | FunctionCall | IfControlFlow
;

/*IntExpression:
	leftI=IntTerm (("+" | "-" | ">") rightI=IntExpression)? //| IntTerm
;

IntTerm:
	leftI=IntFactor (("*" | "/") rightI=IntTerm)? //| IntFactor
;

IntFactor:
	MyNumber //| "(" IntExpression ")"
;

MyNumber:
	MyInteger | MyVariable | FunctionCall | IfControlFlow
;*/

MyInteger:
	PosInteger | NegInteger
;

PosInteger:
	val=INT
;

NegInteger:
	"-" val=INT
;

MyVariable:
	var=IDFUNCVAR
;

/*BoolExpression:
	leftB=BoolTerm ("&" | "|") rightB=BoolExpression | BoolTerm
;

BoolTerm:
	"!" BoolFactor | BoolFactor
;

BoolFactor:
	MyBool | MyVariable// | FunctionCall | IfControlFlow
;*/

BoolTerm:
	"!" MyBool | MyBool
;

MyBool:
	val=BOOL
;

/*StringExpression:
	leftS=StringFactor "++" rightS=StringExpression | StringFactor
;

StringFactor:
	MyString | MyVariable //| FunctionCall | IfControlFlow
;*/

MyString:
	val=STRING
;

IfControlFlow: name=IFCFLOW "(" cond=Expression "," iftrue=Expression "," iffalse=Expression ")";

//FunctionCall: function=[FunctionDefinition|IDFUNCVAR] "(" (args+=Term ("," args+=Term)*)? ")";
FunctionCall: function=(PreDefFunction | [FunctionDefinition|IDFUNCVAR]) "(" (args+=Expression ("," args+=Expression)*)? ")";


IntList: 
	"["{IntList} (elems+=MyInteger + ("," elems+=MyInteger)*)?"]"
;

PreDefFunction: name=PDFUNCTION;

terminal IFCFLOW: "if";

terminal PDFUNCTION: "length" | "cons" | "car" | "cdr" | "isEmpty" | "show";

terminal BOOL: "true" | "false";

terminal IDFUNCVAR: ('a'..'z')('A'..'Z'|'a'..'z'|'0'..'9')*;