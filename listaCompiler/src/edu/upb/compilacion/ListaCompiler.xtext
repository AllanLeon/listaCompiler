grammar edu.upb.compilacion.ListaCompiler with org.eclipse.xtext.common.Terminals

generate listaCompiler "http://www.upb.edu/compilacion/ListaCompiler"

Lista:
	(definitions+=FunctionDefinition | evaluations+=Evaluation)+;

Evaluation:
	"?" return=Expression ";"
;

FunctionDefinition: name=IDFUNCVAR "(" (params+=IDFUNCVAR (',' params+=IDFUNCVAR)*)? ")"
	"=" return=Expression ";"
;

Expression: 
	exp=FirstLevelExp
;

FirstLevelExp:
	args+=SecondLevelExp (op=FirstLevelOp args+=FirstLevelExp)?
;

SecondLevelExp:
	args+=ThirdLevelExp (op=SecondLevelOp args+=SecondLevelExp)?
;

ThirdLevelExp:
	args+=FourthLevelExp (op=ThirdLevelOp args+=ThirdLevelExp)?
;

FourthLevelExp:
	args+=Term (op=FourthLevelOp args+=FourthLevelExp)?
;

Term:
	MyInteger | MyString | MyBool | MyVariable | List | FunctionCall | IfControlFlow | "(" Expression ")"
;

MyInteger:
	PosInteger | NegInteger
;

PosInteger:
	val=INT
;

NegInteger:
	"-" val=INT
;

MyVariable:
	var=IDFUNCVAR
;

MyBool:
	PosBool | NegBool
;

PosBool:
	val=Bool
;

NegBool:
	"!" val=Bool
;

MyString:
	val=STRING
;

IfControlFlow:
	name=CFlow "(" cond=Expression "," iftrue=Expression "," iffalse=Expression ")"
;

FunctionCall:
	PreDefFunctionCall | UserDefFunctionCall
;

PreDefFunctionCall:
	function=PDFunction "(" (args+=Expression ("," args+=Expression)*)? ")"
;

UserDefFunctionCall:
	function=[FunctionDefinition|IDFUNCVAR] "(" (args+=Expression ("," args+=Expression)*)? ")"
;


List: 
	"["{IntList} (elems+=ListElem + ("," elems+=ListElem)*)?"]"
;

ListElem:
	MyInteger | MyVariable
;

enum Bool:
	true = "true" | false="false"
;

enum PDFunction:
	length = "length" |
	cons = "cons" |
	car = "car" |
	cdr = "cdr" |
	isEmpty = "isEmpty" |
	show = "show"
;

enum CFlow:
	if = "if"
;

enum FirstLevelOp:
	and = "&" |
	or = "|"
;

enum SecondLevelOp:
	gt = ">" |
	lt = "<" |
	eq = "=="
;

enum ThirdLevelOp:
	plus = "+" |
	minus = "-" |
	concat = "++"
;

enum FourthLevelOp:
	mult = "*" |
	div = "/"
;

terminal IDFUNCVAR: ('a'..'z')('A'..'Z'|'a'..'z'|'0'..'9')*;