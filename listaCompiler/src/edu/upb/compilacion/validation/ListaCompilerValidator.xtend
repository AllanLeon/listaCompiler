/*
 * generated by Xtext
 */
package edu.upb.compilacion.validation

import edu.upb.compilacion.listaCompiler.ListaCompilerPackage
import edu.upb.compilacion.listaCompiler.PreDefFunctionCall
import edu.upb.compilacion.listaCompiler.UserDefFunctionCall
import org.eclipse.xtext.validation.Check
import edu.upb.compilacion.listaCompiler.PDFunction

//import org.eclipse.xtext.validation.Check

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class ListaCompilerValidator extends AbstractListaCompilerValidator {

//  public static val INVALID_NAME = 'invalidName'
//
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					MyDslPackage.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}

	@Check
	def checkUserDefParametersNumber(UserDefFunctionCall fcall) {
		val params = fcall.function.params.length;
		if (fcall.args.length != params) {
			error('Wrong number of parameters, should be ' + params,
				ListaCompilerPackage.Literals.FUNCTION_CALL__ARGS,
				'wrongParametersNumber'
			)
		}
	}
	
	@Check
	def checkPreDefParametersNumber(PreDefFunctionCall fcall) {
		val function = fcall.function;
		var params = 0;
		
		switch (function) {
			case PDFunction.SHOW,
			case PDFunction.LENGTH,
			case PDFunction.CAR,
			case PDFunction.CDR,
			case PDFunction.IS_EMPTY:
				params = 1
			case PDFunction.CONS:
				params = 2
			default:
				params = 0
		}
		
		if (fcall.args.length != params) {
			error('Wrong number of parameters, should be ' + 1,
			ListaCompilerPackage.Literals.FUNCTION_CALL__ARGS,
			'wrongParametersNumber');
		}
	}
}
