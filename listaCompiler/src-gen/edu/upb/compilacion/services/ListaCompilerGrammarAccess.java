/*
 * generated by Xtext
 */
package edu.upb.compilacion.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ListaCompilerGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ListaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Lista");
		private final Assignment cLinesAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cLinesAlternatives_0 = (Alternatives)cLinesAssignment.eContents().get(0);
		private final RuleCall cLinesEvaluationParserRuleCall_0_0 = (RuleCall)cLinesAlternatives_0.eContents().get(0);
		private final RuleCall cLinesFunctionDefinitionParserRuleCall_0_1 = (RuleCall)cLinesAlternatives_0.eContents().get(1);
		
		//Lista:
		//	lines+=(Evaluation | FunctionDefinition)+;
		@Override public ParserRule getRule() { return rule; }

		//lines+=(Evaluation | FunctionDefinition)+
		public Assignment getLinesAssignment() { return cLinesAssignment; }

		//Evaluation | FunctionDefinition
		public Alternatives getLinesAlternatives_0() { return cLinesAlternatives_0; }

		//Evaluation
		public RuleCall getLinesEvaluationParserRuleCall_0_0() { return cLinesEvaluationParserRuleCall_0_0; }

		//FunctionDefinition
		public RuleCall getLinesFunctionDefinitionParserRuleCall_0_1() { return cLinesFunctionDefinitionParserRuleCall_0_1; }
	}

	public class EvaluationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Evaluation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReturnAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReturnExpressionParserRuleCall_1_0 = (RuleCall)cReturnAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Evaluation:
		//	"?" return=Expression ";";
		@Override public ParserRule getRule() { return rule; }

		//"?" return=Expression ";"
		public Group getGroup() { return cGroup; }

		//"?"
		public Keyword getQuestionMarkKeyword_0() { return cQuestionMarkKeyword_0; }

		//return=Expression
		public Assignment getReturnAssignment_1() { return cReturnAssignment_1; }

		//Expression
		public RuleCall getReturnExpressionParserRuleCall_1_0() { return cReturnExpressionParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class FunctionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDFUNCVARTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParamsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParamsIDFUNCVARTerminalRuleCall_2_0_0 = (RuleCall)cParamsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParamsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParamsIDFUNCVARTerminalRuleCall_2_1_1_0 = (RuleCall)cParamsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cReturnAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cReturnExpressionParserRuleCall_5_0 = (RuleCall)cReturnAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//FunctionDefinition:
		//	name=IDFUNCVAR "(" (params+=IDFUNCVAR ("," params+=IDFUNCVAR)*)? ")" "=" return=Expression ";";
		@Override public ParserRule getRule() { return rule; }

		//name=IDFUNCVAR "(" (params+=IDFUNCVAR ("," params+=IDFUNCVAR)*)? ")" "=" return=Expression ";"
		public Group getGroup() { return cGroup; }

		//name=IDFUNCVAR
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//IDFUNCVAR
		public RuleCall getNameIDFUNCVARTerminalRuleCall_0_0() { return cNameIDFUNCVARTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(params+=IDFUNCVAR ("," params+=IDFUNCVAR)*)?
		public Group getGroup_2() { return cGroup_2; }

		//params+=IDFUNCVAR
		public Assignment getParamsAssignment_2_0() { return cParamsAssignment_2_0; }

		//IDFUNCVAR
		public RuleCall getParamsIDFUNCVARTerminalRuleCall_2_0_0() { return cParamsIDFUNCVARTerminalRuleCall_2_0_0; }

		//("," params+=IDFUNCVAR)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//params+=IDFUNCVAR
		public Assignment getParamsAssignment_2_1_1() { return cParamsAssignment_2_1_1; }

		//IDFUNCVAR
		public RuleCall getParamsIDFUNCVARTerminalRuleCall_2_1_1_0() { return cParamsIDFUNCVARTerminalRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"="
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }

		//return=Expression
		public Assignment getReturnAssignment_5() { return cReturnAssignment_5; }

		//Expression
		public RuleCall getReturnExpressionParserRuleCall_5_0() { return cReturnExpressionParserRuleCall_5_0; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final RuleCall cFirstLevelExpParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression: //IntExpression //| BoolExpression | StringExpression |IntList
		////args+=Term (operators+=Operator args+=Term)*
		//	FirstLevelExp;
		@Override public ParserRule getRule() { return rule; }

		////IntExpression //| BoolExpression | StringExpression |IntList
		////args+=Term (operators+=Operator args+=Term)*
		//FirstLevelExp
		public RuleCall getFirstLevelExpParserRuleCall() { return cFirstLevelExpParserRuleCall; }
	}

	public class FirstLevelExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FirstLevelExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFirstAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFirstSecondLevelExpParserRuleCall_0_0 = (RuleCall)cFirstAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Keyword cAmpersandKeyword_1_0_2 = (Keyword)cAlternatives_1_0.eContents().get(2);
		private final Keyword cVerticalLineKeyword_1_0_3 = (Keyword)cAlternatives_1_0.eContents().get(3);
		private final Keyword cEqualsSignEqualsSignKeyword_1_0_4 = (Keyword)cAlternatives_1_0.eContents().get(4);
		private final Assignment cSecondAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSecondFirstLevelExpParserRuleCall_1_1_0 = (RuleCall)cSecondAssignment_1_1.eContents().get(0);
		
		////Term: DataType | FunctionCall | IfControlFlow;
		//FirstLevelExp:
		//	first=SecondLevelExp ((">" | "<" | "&" | "|" | "==") second=FirstLevelExp)?;
		@Override public ParserRule getRule() { return rule; }

		//first=SecondLevelExp ((">" | "<" | "&" | "|" | "==") second=FirstLevelExp)?
		public Group getGroup() { return cGroup; }

		//first=SecondLevelExp
		public Assignment getFirstAssignment_0() { return cFirstAssignment_0; }

		//SecondLevelExp
		public RuleCall getFirstSecondLevelExpParserRuleCall_0_0() { return cFirstSecondLevelExpParserRuleCall_0_0; }

		//((">" | "<" | "&" | "|" | "==") second=FirstLevelExp)?
		public Group getGroup_1() { return cGroup_1; }

		//">" | "<" | "&" | "|" | "=="
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_0_0() { return cGreaterThanSignKeyword_1_0_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1_0_1() { return cLessThanSignKeyword_1_0_1; }

		//"&"
		public Keyword getAmpersandKeyword_1_0_2() { return cAmpersandKeyword_1_0_2; }

		//"|"
		public Keyword getVerticalLineKeyword_1_0_3() { return cVerticalLineKeyword_1_0_3; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_1_0_4() { return cEqualsSignEqualsSignKeyword_1_0_4; }

		//second=FirstLevelExp
		public Assignment getSecondAssignment_1_1() { return cSecondAssignment_1_1; }

		//FirstLevelExp
		public RuleCall getSecondFirstLevelExpParserRuleCall_1_1_0() { return cSecondFirstLevelExpParserRuleCall_1_1_0; }
	}

	public class SecondLevelExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SecondLevelExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFirstAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFirstThirdLevelExpParserRuleCall_0_0 = (RuleCall)cFirstAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Keyword cPlusSignPlusSignKeyword_1_0_2 = (Keyword)cAlternatives_1_0.eContents().get(2);
		private final Assignment cSecondAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSecondSecondLevelExpParserRuleCall_1_1_0 = (RuleCall)cSecondAssignment_1_1.eContents().get(0);
		
		//SecondLevelExp:
		//	first=ThirdLevelExp (("+" | "-" | "++") second=SecondLevelExp)?;
		@Override public ParserRule getRule() { return rule; }

		//first=ThirdLevelExp (("+" | "-" | "++") second=SecondLevelExp)?
		public Group getGroup() { return cGroup; }

		//first=ThirdLevelExp
		public Assignment getFirstAssignment_0() { return cFirstAssignment_0; }

		//ThirdLevelExp
		public RuleCall getFirstThirdLevelExpParserRuleCall_0_0() { return cFirstThirdLevelExpParserRuleCall_0_0; }

		//(("+" | "-" | "++") second=SecondLevelExp)?
		public Group getGroup_1() { return cGroup_1; }

		//"+" | "-" | "++"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_0_0() { return cPlusSignKeyword_1_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0_1() { return cHyphenMinusKeyword_1_0_1; }

		//"++"
		public Keyword getPlusSignPlusSignKeyword_1_0_2() { return cPlusSignPlusSignKeyword_1_0_2; }

		//second=SecondLevelExp
		public Assignment getSecondAssignment_1_1() { return cSecondAssignment_1_1; }

		//SecondLevelExp
		public RuleCall getSecondSecondLevelExpParserRuleCall_1_1_0() { return cSecondSecondLevelExpParserRuleCall_1_1_0; }
	}

	public class ThirdLevelExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ThirdLevelExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFirstAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFirstTermParserRuleCall_0_0 = (RuleCall)cFirstAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Assignment cSecondAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSecondThirdLevelExpParserRuleCall_1_1_0 = (RuleCall)cSecondAssignment_1_1.eContents().get(0);
		
		//ThirdLevelExp:
		//	first=Term (("*" | "/") second=ThirdLevelExp)?;
		@Override public ParserRule getRule() { return rule; }

		//first=Term (("*" | "/") second=ThirdLevelExp)?
		public Group getGroup() { return cGroup; }

		//first=Term
		public Assignment getFirstAssignment_0() { return cFirstAssignment_0; }

		//Term
		public RuleCall getFirstTermParserRuleCall_0_0() { return cFirstTermParserRuleCall_0_0; }

		//(("*" | "/") second=ThirdLevelExp)?
		public Group getGroup_1() { return cGroup_1; }

		//"*" | "/"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_0_0() { return cAsteriskKeyword_1_0_0; }

		//"/"
		public Keyword getSolidusKeyword_1_0_1() { return cSolidusKeyword_1_0_1; }

		//second=ThirdLevelExp
		public Assignment getSecondAssignment_1_1() { return cSecondAssignment_1_1; }

		//ThirdLevelExp
		public RuleCall getSecondThirdLevelExpParserRuleCall_1_1_0() { return cSecondThirdLevelExpParserRuleCall_1_1_0; }
	}

	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Term");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMyIntegerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMyStringParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBoolTermParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMyVariableParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cIntListParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cFunctionCallParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cIfControlFlowParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Term:
		//	MyInteger | MyString | BoolTerm | MyVariable | IntList | FunctionCall | IfControlFlow;
		@Override public ParserRule getRule() { return rule; }

		//MyInteger | MyString | BoolTerm | MyVariable | IntList | FunctionCall | IfControlFlow
		public Alternatives getAlternatives() { return cAlternatives; }

		//MyInteger
		public RuleCall getMyIntegerParserRuleCall_0() { return cMyIntegerParserRuleCall_0; }

		//MyString
		public RuleCall getMyStringParserRuleCall_1() { return cMyStringParserRuleCall_1; }

		//BoolTerm
		public RuleCall getBoolTermParserRuleCall_2() { return cBoolTermParserRuleCall_2; }

		//MyVariable
		public RuleCall getMyVariableParserRuleCall_3() { return cMyVariableParserRuleCall_3; }

		//IntList
		public RuleCall getIntListParserRuleCall_4() { return cIntListParserRuleCall_4; }

		//FunctionCall
		public RuleCall getFunctionCallParserRuleCall_5() { return cFunctionCallParserRuleCall_5; }

		//IfControlFlow
		public RuleCall getIfControlFlowParserRuleCall_6() { return cIfControlFlowParserRuleCall_6; }
	}

	public class MyIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MyInteger");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPosIntegerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNegIntegerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// *IntExpression:
		//	leftI=IntTerm (("+" | "-" | ">") rightI=IntExpression)? //| IntTerm
		//;
		//
		//IntTerm:
		//	leftI=IntFactor (("*" | "/") rightI=IntTerm)? //| IntFactor
		//;
		//
		//IntFactor:
		//	MyNumber //| "(" IntExpression ")"
		//;
		//
		//MyNumber:
		//	MyInteger | MyVariable | FunctionCall | IfControlFlow
		//;* / MyInteger:
		//	PosInteger | NegInteger;
		@Override public ParserRule getRule() { return rule; }

		//PosInteger | NegInteger
		public Alternatives getAlternatives() { return cAlternatives; }

		//PosInteger
		public RuleCall getPosIntegerParserRuleCall_0() { return cPosIntegerParserRuleCall_0; }

		//NegInteger
		public RuleCall getNegIntegerParserRuleCall_1() { return cNegIntegerParserRuleCall_1; }
	}

	public class PosIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PosInteger");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValINTTerminalRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//PosInteger:
		//	val=INT;
		@Override public ParserRule getRule() { return rule; }

		//val=INT
		public Assignment getValAssignment() { return cValAssignment; }

		//INT
		public RuleCall getValINTTerminalRuleCall_0() { return cValINTTerminalRuleCall_0; }
	}

	public class NegIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NegInteger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValINTTerminalRuleCall_1_0 = (RuleCall)cValAssignment_1.eContents().get(0);
		
		//NegInteger:
		//	"-" val=INT;
		@Override public ParserRule getRule() { return rule; }

		//"-" val=INT
		public Group getGroup() { return cGroup; }

		//"-"
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//val=INT
		public Assignment getValAssignment_1() { return cValAssignment_1; }

		//INT
		public RuleCall getValINTTerminalRuleCall_1_0() { return cValINTTerminalRuleCall_1_0; }
	}

	public class MyVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MyVariable");
		private final Assignment cVarAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cVarIDFUNCVARTerminalRuleCall_0 = (RuleCall)cVarAssignment.eContents().get(0);
		
		//MyVariable:
		//	var=IDFUNCVAR;
		@Override public ParserRule getRule() { return rule; }

		//var=IDFUNCVAR
		public Assignment getVarAssignment() { return cVarAssignment; }

		//IDFUNCVAR
		public RuleCall getVarIDFUNCVARTerminalRuleCall_0() { return cVarIDFUNCVARTerminalRuleCall_0; }
	}

	public class BoolTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BoolTerm");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cMyBoolParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cMyBoolParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// *BoolExpression:
		//	leftB=BoolTerm ("&" | "|") rightB=BoolExpression | BoolTerm
		//;
		//
		//BoolTerm:
		//	"!" BoolFactor | BoolFactor
		//;
		//
		//BoolFactor:
		//	MyBool | MyVariable// | FunctionCall | IfControlFlow
		//;* / BoolTerm:
		//	"!" MyBool | MyBool;
		@Override public ParserRule getRule() { return rule; }

		//"!" MyBool | MyBool
		public Alternatives getAlternatives() { return cAlternatives; }

		//"!" MyBool
		public Group getGroup_0() { return cGroup_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_0_0() { return cExclamationMarkKeyword_0_0; }

		//MyBool
		public RuleCall getMyBoolParserRuleCall_0_1() { return cMyBoolParserRuleCall_0_1; }

		//MyBool
		public RuleCall getMyBoolParserRuleCall_1() { return cMyBoolParserRuleCall_1; }
	}

	public class MyBoolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MyBool");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValBOOLTerminalRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//MyBool:
		//	val=BOOL;
		@Override public ParserRule getRule() { return rule; }

		//val=BOOL
		public Assignment getValAssignment() { return cValAssignment; }

		//BOOL
		public RuleCall getValBOOLTerminalRuleCall_0() { return cValBOOLTerminalRuleCall_0; }
	}

	public class MyStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MyString");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValSTRINGTerminalRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		/// *StringExpression:
		//	leftS=StringFactor "++" rightS=StringExpression | StringFactor
		//;
		//
		//StringFactor:
		//	MyString | MyVariable //| FunctionCall | IfControlFlow
		//;* / MyString:
		//	val=STRING;
		@Override public ParserRule getRule() { return rule; }

		//val=STRING
		public Assignment getValAssignment() { return cValAssignment; }

		//STRING
		public RuleCall getValSTRINGTerminalRuleCall_0() { return cValSTRINGTerminalRuleCall_0; }
	}

	public class IfControlFlowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfControlFlow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIFCFLOWTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCondAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCondExpressionParserRuleCall_2_0 = (RuleCall)cCondAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIftrueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIftrueExpressionParserRuleCall_4_0 = (RuleCall)cIftrueAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cIffalseAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cIffalseExpressionParserRuleCall_6_0 = (RuleCall)cIffalseAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//IfControlFlow:
		//	name=IFCFLOW "(" cond=Expression "," iftrue=Expression "," iffalse=Expression ")";
		@Override public ParserRule getRule() { return rule; }

		//name=IFCFLOW "(" cond=Expression "," iftrue=Expression "," iffalse=Expression ")"
		public Group getGroup() { return cGroup; }

		//name=IFCFLOW
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//IFCFLOW
		public RuleCall getNameIFCFLOWTerminalRuleCall_0_0() { return cNameIFCFLOWTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//cond=Expression
		public Assignment getCondAssignment_2() { return cCondAssignment_2; }

		//Expression
		public RuleCall getCondExpressionParserRuleCall_2_0() { return cCondExpressionParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//iftrue=Expression
		public Assignment getIftrueAssignment_4() { return cIftrueAssignment_4; }

		//Expression
		public RuleCall getIftrueExpressionParserRuleCall_4_0() { return cIftrueExpressionParserRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//iffalse=Expression
		public Assignment getIffalseAssignment_6() { return cIffalseAssignment_6; }

		//Expression
		public RuleCall getIffalseExpressionParserRuleCall_6_0() { return cIffalseExpressionParserRuleCall_6_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}

	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cFunctionAlternatives_0_0 = (Alternatives)cFunctionAssignment_0.eContents().get(0);
		private final RuleCall cFunctionPreDefFunctionParserRuleCall_0_0_0 = (RuleCall)cFunctionAlternatives_0_0.eContents().get(0);
		private final CrossReference cFunctionFunctionDefinitionCrossReference_0_0_1 = (CrossReference)cFunctionAlternatives_0_0.eContents().get(1);
		private final RuleCall cFunctionFunctionDefinitionIDFUNCVARTerminalRuleCall_0_0_1_1 = (RuleCall)cFunctionFunctionDefinitionCrossReference_0_0_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgsExpressionParserRuleCall_2_0_0 = (RuleCall)cArgsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_2_1_1_0 = (RuleCall)cArgsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////FunctionCall: function=[FunctionDefinition|IDFUNCVAR] "(" (args+=Term ("," args+=Term)*)? ")";
		//FunctionCall:
		//	function=(PreDefFunction | [FunctionDefinition|IDFUNCVAR]) "(" (args+=Expression ("," args+=Expression)*)? ")";
		@Override public ParserRule getRule() { return rule; }

		//function=(PreDefFunction | [FunctionDefinition|IDFUNCVAR]) "(" (args+=Expression ("," args+=Expression)*)? ")"
		public Group getGroup() { return cGroup; }

		//function=(PreDefFunction | [FunctionDefinition|IDFUNCVAR])
		public Assignment getFunctionAssignment_0() { return cFunctionAssignment_0; }

		//(PreDefFunction | [FunctionDefinition|IDFUNCVAR])
		public Alternatives getFunctionAlternatives_0_0() { return cFunctionAlternatives_0_0; }

		//PreDefFunction
		public RuleCall getFunctionPreDefFunctionParserRuleCall_0_0_0() { return cFunctionPreDefFunctionParserRuleCall_0_0_0; }

		//[FunctionDefinition|IDFUNCVAR]
		public CrossReference getFunctionFunctionDefinitionCrossReference_0_0_1() { return cFunctionFunctionDefinitionCrossReference_0_0_1; }

		//IDFUNCVAR
		public RuleCall getFunctionFunctionDefinitionIDFUNCVARTerminalRuleCall_0_0_1_1() { return cFunctionFunctionDefinitionIDFUNCVARTerminalRuleCall_0_0_1_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(args+=Expression ("," args+=Expression)*)?
		public Group getGroup_2() { return cGroup_2; }

		//args+=Expression
		public Assignment getArgsAssignment_2_0() { return cArgsAssignment_2_0; }

		//Expression
		public RuleCall getArgsExpressionParserRuleCall_2_0_0() { return cArgsExpressionParserRuleCall_2_0_0; }

		//("," args+=Expression)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//args+=Expression
		public Assignment getArgsAssignment_2_1_1() { return cArgsAssignment_2_1_1; }

		//Expression
		public RuleCall getArgsExpressionParserRuleCall_2_1_1_0() { return cArgsExpressionParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class IntListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cIntListAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cElemsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cElemsMyIntegerParserRuleCall_2_0_0 = (RuleCall)cElemsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cElemsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cElemsMyIntegerParserRuleCall_2_1_1_0 = (RuleCall)cElemsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////DataType: val=INTEGER | val=BOOL | val=STRING | var=IDFUNCVAR | IntList;
		//IntList:
		//	"[" {IntList} (elems+=MyInteger+ ("," elems+=MyInteger)*)? "]";
		@Override public ParserRule getRule() { return rule; }

		//"[" {IntList} (elems+=MyInteger+ ("," elems+=MyInteger)*)? "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//{IntList}
		public Action getIntListAction_1() { return cIntListAction_1; }

		//(elems+=MyInteger+ ("," elems+=MyInteger)*)?
		public Group getGroup_2() { return cGroup_2; }

		//elems+=MyInteger+
		public Assignment getElemsAssignment_2_0() { return cElemsAssignment_2_0; }

		//MyInteger
		public RuleCall getElemsMyIntegerParserRuleCall_2_0_0() { return cElemsMyIntegerParserRuleCall_2_0_0; }

		//("," elems+=MyInteger)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//elems+=MyInteger
		public Assignment getElemsAssignment_2_1_1() { return cElemsAssignment_2_1_1; }

		//MyInteger
		public RuleCall getElemsMyIntegerParserRuleCall_2_1_1_0() { return cElemsMyIntegerParserRuleCall_2_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class PreDefFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PreDefFunction");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNamePDFUNCTIONTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//PreDefFunction:
		//	name=PDFUNCTION;
		@Override public ParserRule getRule() { return rule; }

		//name=PDFUNCTION
		public Assignment getNameAssignment() { return cNameAssignment; }

		//PDFUNCTION
		public RuleCall getNamePDFUNCTIONTerminalRuleCall_0() { return cNamePDFUNCTIONTerminalRuleCall_0; }
	}
	
	
	private final ListaElements pLista;
	private final EvaluationElements pEvaluation;
	private final FunctionDefinitionElements pFunctionDefinition;
	private final ExpressionElements pExpression;
	private final FirstLevelExpElements pFirstLevelExp;
	private final SecondLevelExpElements pSecondLevelExp;
	private final ThirdLevelExpElements pThirdLevelExp;
	private final TermElements pTerm;
	private final MyIntegerElements pMyInteger;
	private final PosIntegerElements pPosInteger;
	private final NegIntegerElements pNegInteger;
	private final MyVariableElements pMyVariable;
	private final BoolTermElements pBoolTerm;
	private final MyBoolElements pMyBool;
	private final MyStringElements pMyString;
	private final IfControlFlowElements pIfControlFlow;
	private final FunctionCallElements pFunctionCall;
	private final IntListElements pIntList;
	private final PreDefFunctionElements pPreDefFunction;
	private final TerminalRule tIFCFLOW;
	private final TerminalRule tPDFUNCTION;
	private final TerminalRule tBOOL;
	private final TerminalRule tIDFUNCVAR;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ListaCompilerGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pLista = new ListaElements();
		this.pEvaluation = new EvaluationElements();
		this.pFunctionDefinition = new FunctionDefinitionElements();
		this.pExpression = new ExpressionElements();
		this.pFirstLevelExp = new FirstLevelExpElements();
		this.pSecondLevelExp = new SecondLevelExpElements();
		this.pThirdLevelExp = new ThirdLevelExpElements();
		this.pTerm = new TermElements();
		this.pMyInteger = new MyIntegerElements();
		this.pPosInteger = new PosIntegerElements();
		this.pNegInteger = new NegIntegerElements();
		this.pMyVariable = new MyVariableElements();
		this.pBoolTerm = new BoolTermElements();
		this.pMyBool = new MyBoolElements();
		this.pMyString = new MyStringElements();
		this.pIfControlFlow = new IfControlFlowElements();
		this.pFunctionCall = new FunctionCallElements();
		this.pIntList = new IntListElements();
		this.pPreDefFunction = new PreDefFunctionElements();
		this.tIFCFLOW = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IFCFLOW");
		this.tPDFUNCTION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PDFUNCTION");
		this.tBOOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOOL");
		this.tIDFUNCVAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IDFUNCVAR");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("edu.upb.compilacion.ListaCompiler".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Lista:
	//	lines+=(Evaluation | FunctionDefinition)+;
	public ListaElements getListaAccess() {
		return pLista;
	}
	
	public ParserRule getListaRule() {
		return getListaAccess().getRule();
	}

	//Evaluation:
	//	"?" return=Expression ";";
	public EvaluationElements getEvaluationAccess() {
		return pEvaluation;
	}
	
	public ParserRule getEvaluationRule() {
		return getEvaluationAccess().getRule();
	}

	//FunctionDefinition:
	//	name=IDFUNCVAR "(" (params+=IDFUNCVAR ("," params+=IDFUNCVAR)*)? ")" "=" return=Expression ";";
	public FunctionDefinitionElements getFunctionDefinitionAccess() {
		return pFunctionDefinition;
	}
	
	public ParserRule getFunctionDefinitionRule() {
		return getFunctionDefinitionAccess().getRule();
	}

	//Expression: //IntExpression //| BoolExpression | StringExpression |IntList
	////args+=Term (operators+=Operator args+=Term)*
	//	FirstLevelExp;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	////Term: DataType | FunctionCall | IfControlFlow;
	//FirstLevelExp:
	//	first=SecondLevelExp ((">" | "<" | "&" | "|" | "==") second=FirstLevelExp)?;
	public FirstLevelExpElements getFirstLevelExpAccess() {
		return pFirstLevelExp;
	}
	
	public ParserRule getFirstLevelExpRule() {
		return getFirstLevelExpAccess().getRule();
	}

	//SecondLevelExp:
	//	first=ThirdLevelExp (("+" | "-" | "++") second=SecondLevelExp)?;
	public SecondLevelExpElements getSecondLevelExpAccess() {
		return pSecondLevelExp;
	}
	
	public ParserRule getSecondLevelExpRule() {
		return getSecondLevelExpAccess().getRule();
	}

	//ThirdLevelExp:
	//	first=Term (("*" | "/") second=ThirdLevelExp)?;
	public ThirdLevelExpElements getThirdLevelExpAccess() {
		return pThirdLevelExp;
	}
	
	public ParserRule getThirdLevelExpRule() {
		return getThirdLevelExpAccess().getRule();
	}

	//Term:
	//	MyInteger | MyString | BoolTerm | MyVariable | IntList | FunctionCall | IfControlFlow;
	public TermElements getTermAccess() {
		return pTerm;
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}

	/// *IntExpression:
	//	leftI=IntTerm (("+" | "-" | ">") rightI=IntExpression)? //| IntTerm
	//;
	//
	//IntTerm:
	//	leftI=IntFactor (("*" | "/") rightI=IntTerm)? //| IntFactor
	//;
	//
	//IntFactor:
	//	MyNumber //| "(" IntExpression ")"
	//;
	//
	//MyNumber:
	//	MyInteger | MyVariable | FunctionCall | IfControlFlow
	//;* / MyInteger:
	//	PosInteger | NegInteger;
	public MyIntegerElements getMyIntegerAccess() {
		return pMyInteger;
	}
	
	public ParserRule getMyIntegerRule() {
		return getMyIntegerAccess().getRule();
	}

	//PosInteger:
	//	val=INT;
	public PosIntegerElements getPosIntegerAccess() {
		return pPosInteger;
	}
	
	public ParserRule getPosIntegerRule() {
		return getPosIntegerAccess().getRule();
	}

	//NegInteger:
	//	"-" val=INT;
	public NegIntegerElements getNegIntegerAccess() {
		return pNegInteger;
	}
	
	public ParserRule getNegIntegerRule() {
		return getNegIntegerAccess().getRule();
	}

	//MyVariable:
	//	var=IDFUNCVAR;
	public MyVariableElements getMyVariableAccess() {
		return pMyVariable;
	}
	
	public ParserRule getMyVariableRule() {
		return getMyVariableAccess().getRule();
	}

	/// *BoolExpression:
	//	leftB=BoolTerm ("&" | "|") rightB=BoolExpression | BoolTerm
	//;
	//
	//BoolTerm:
	//	"!" BoolFactor | BoolFactor
	//;
	//
	//BoolFactor:
	//	MyBool | MyVariable// | FunctionCall | IfControlFlow
	//;* / BoolTerm:
	//	"!" MyBool | MyBool;
	public BoolTermElements getBoolTermAccess() {
		return pBoolTerm;
	}
	
	public ParserRule getBoolTermRule() {
		return getBoolTermAccess().getRule();
	}

	//MyBool:
	//	val=BOOL;
	public MyBoolElements getMyBoolAccess() {
		return pMyBool;
	}
	
	public ParserRule getMyBoolRule() {
		return getMyBoolAccess().getRule();
	}

	/// *StringExpression:
	//	leftS=StringFactor "++" rightS=StringExpression | StringFactor
	//;
	//
	//StringFactor:
	//	MyString | MyVariable //| FunctionCall | IfControlFlow
	//;* / MyString:
	//	val=STRING;
	public MyStringElements getMyStringAccess() {
		return pMyString;
	}
	
	public ParserRule getMyStringRule() {
		return getMyStringAccess().getRule();
	}

	//IfControlFlow:
	//	name=IFCFLOW "(" cond=Expression "," iftrue=Expression "," iffalse=Expression ")";
	public IfControlFlowElements getIfControlFlowAccess() {
		return pIfControlFlow;
	}
	
	public ParserRule getIfControlFlowRule() {
		return getIfControlFlowAccess().getRule();
	}

	////FunctionCall: function=[FunctionDefinition|IDFUNCVAR] "(" (args+=Term ("," args+=Term)*)? ")";
	//FunctionCall:
	//	function=(PreDefFunction | [FunctionDefinition|IDFUNCVAR]) "(" (args+=Expression ("," args+=Expression)*)? ")";
	public FunctionCallElements getFunctionCallAccess() {
		return pFunctionCall;
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}

	////DataType: val=INTEGER | val=BOOL | val=STRING | var=IDFUNCVAR | IntList;
	//IntList:
	//	"[" {IntList} (elems+=MyInteger+ ("," elems+=MyInteger)*)? "]";
	public IntListElements getIntListAccess() {
		return pIntList;
	}
	
	public ParserRule getIntListRule() {
		return getIntListAccess().getRule();
	}

	//PreDefFunction:
	//	name=PDFUNCTION;
	public PreDefFunctionElements getPreDefFunctionAccess() {
		return pPreDefFunction;
	}
	
	public ParserRule getPreDefFunctionRule() {
		return getPreDefFunctionAccess().getRule();
	}

	////Operator: type=IDOPINT | type=IDOPBOOL | type=IDOPSTR | type=IDOPGLOBAL;
	//terminal IFCFLOW:
	//	"if";
	public TerminalRule getIFCFLOWRule() {
		return tIFCFLOW;
	} 

	//terminal PDFUNCTION:
	//	"length" | "cons" | "car" | "cdr" | "isEmpty" | "show";
	public TerminalRule getPDFUNCTIONRule() {
		return tPDFUNCTION;
	} 

	////terminal INTEGER: '-'? ('0'..'9')+;
	//terminal BOOL:
	//	"true" | "false";
	public TerminalRule getBOOLRule() {
		return tBOOL;
	} 

	////terminal IDOPINT: '+' | '-' | '*' | '/' | '<' | '>';
	////terminal IDOPBOOL: '&' | '|' | '!';
	////terminal IDOPSTR: '++';
	////terminal IDOPGLOBAL: '=='; terminal IDFUNCVAR:
	//	"a".."z" ("A".."Z" | "a".."z" | "0".."9")*;
	public TerminalRule getIDFUNCVARRule() {
		return tIDFUNCVAR;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
