/*
 * generated by Xtext
 */
package edu.upb.compilacion.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ListaCompilerGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ListaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Lista");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cDefinitionsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cDefinitionsFunctionDefinitionParserRuleCall_0_0 = (RuleCall)cDefinitionsAssignment_0.eContents().get(0);
		private final Assignment cEvaluationsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cEvaluationsEvaluationParserRuleCall_1_0 = (RuleCall)cEvaluationsAssignment_1.eContents().get(0);
		
		//Lista:
		//	(definitions+=FunctionDefinition | evaluations+=Evaluation)+;
		@Override public ParserRule getRule() { return rule; }

		//(definitions+=FunctionDefinition | evaluations+=Evaluation)+
		public Alternatives getAlternatives() { return cAlternatives; }

		//definitions+=FunctionDefinition
		public Assignment getDefinitionsAssignment_0() { return cDefinitionsAssignment_0; }

		//FunctionDefinition
		public RuleCall getDefinitionsFunctionDefinitionParserRuleCall_0_0() { return cDefinitionsFunctionDefinitionParserRuleCall_0_0; }

		//evaluations+=Evaluation
		public Assignment getEvaluationsAssignment_1() { return cEvaluationsAssignment_1; }

		//Evaluation
		public RuleCall getEvaluationsEvaluationParserRuleCall_1_0() { return cEvaluationsEvaluationParserRuleCall_1_0; }
	}

	public class EvaluationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Evaluation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReturnAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReturnExpressionParserRuleCall_1_0 = (RuleCall)cReturnAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Evaluation:
		//	"?" return=Expression ";";
		@Override public ParserRule getRule() { return rule; }

		//"?" return=Expression ";"
		public Group getGroup() { return cGroup; }

		//"?"
		public Keyword getQuestionMarkKeyword_0() { return cQuestionMarkKeyword_0; }

		//return=Expression
		public Assignment getReturnAssignment_1() { return cReturnAssignment_1; }

		//Expression
		public RuleCall getReturnExpressionParserRuleCall_1_0() { return cReturnExpressionParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class FunctionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDFUNCVARTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParamsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParamsIDFUNCVARTerminalRuleCall_2_0_0 = (RuleCall)cParamsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParamsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParamsIDFUNCVARTerminalRuleCall_2_1_1_0 = (RuleCall)cParamsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cReturnAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cReturnExpressionParserRuleCall_5_0 = (RuleCall)cReturnAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//FunctionDefinition:
		//	name=IDFUNCVAR "(" (params+=IDFUNCVAR ("," params+=IDFUNCVAR)*)? ")" "=" return=Expression ";";
		@Override public ParserRule getRule() { return rule; }

		//name=IDFUNCVAR "(" (params+=IDFUNCVAR ("," params+=IDFUNCVAR)*)? ")" "=" return=Expression ";"
		public Group getGroup() { return cGroup; }

		//name=IDFUNCVAR
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//IDFUNCVAR
		public RuleCall getNameIDFUNCVARTerminalRuleCall_0_0() { return cNameIDFUNCVARTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(params+=IDFUNCVAR ("," params+=IDFUNCVAR)*)?
		public Group getGroup_2() { return cGroup_2; }

		//params+=IDFUNCVAR
		public Assignment getParamsAssignment_2_0() { return cParamsAssignment_2_0; }

		//IDFUNCVAR
		public RuleCall getParamsIDFUNCVARTerminalRuleCall_2_0_0() { return cParamsIDFUNCVARTerminalRuleCall_2_0_0; }

		//("," params+=IDFUNCVAR)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//params+=IDFUNCVAR
		public Assignment getParamsAssignment_2_1_1() { return cParamsAssignment_2_1_1; }

		//IDFUNCVAR
		public RuleCall getParamsIDFUNCVARTerminalRuleCall_2_1_1_0() { return cParamsIDFUNCVARTerminalRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"="
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }

		//return=Expression
		public Assignment getReturnAssignment_5() { return cReturnAssignment_5; }

		//Expression
		public RuleCall getReturnExpressionParserRuleCall_5_0() { return cReturnExpressionParserRuleCall_5_0; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Assignment cExpAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpFirstLevelExpParserRuleCall_0 = (RuleCall)cExpAssignment.eContents().get(0);
		
		//Expression:
		//	exp=FirstLevelExp;
		@Override public ParserRule getRule() { return rule; }

		//exp=FirstLevelExp
		public Assignment getExpAssignment() { return cExpAssignment; }

		//FirstLevelExp
		public RuleCall getExpFirstLevelExpParserRuleCall_0() { return cExpFirstLevelExpParserRuleCall_0; }
	}

	public class FirstLevelExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FirstLevelExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArgsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArgsSecondLevelExpParserRuleCall_0_0 = (RuleCall)cArgsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpFirstLevelOpEnumRuleCall_1_0_0 = (RuleCall)cOpAssignment_1_0.eContents().get(0);
		private final Assignment cArgsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgsFirstLevelExpParserRuleCall_1_1_0 = (RuleCall)cArgsAssignment_1_1.eContents().get(0);
		
		//FirstLevelExp:
		//	args+=SecondLevelExp (op=FirstLevelOp args+=FirstLevelExp)?;
		@Override public ParserRule getRule() { return rule; }

		//args+=SecondLevelExp (op=FirstLevelOp args+=FirstLevelExp)?
		public Group getGroup() { return cGroup; }

		//args+=SecondLevelExp
		public Assignment getArgsAssignment_0() { return cArgsAssignment_0; }

		//SecondLevelExp
		public RuleCall getArgsSecondLevelExpParserRuleCall_0_0() { return cArgsSecondLevelExpParserRuleCall_0_0; }

		//(op=FirstLevelOp args+=FirstLevelExp)?
		public Group getGroup_1() { return cGroup_1; }

		//op=FirstLevelOp
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }

		//FirstLevelOp
		public RuleCall getOpFirstLevelOpEnumRuleCall_1_0_0() { return cOpFirstLevelOpEnumRuleCall_1_0_0; }

		//args+=FirstLevelExp
		public Assignment getArgsAssignment_1_1() { return cArgsAssignment_1_1; }

		//FirstLevelExp
		public RuleCall getArgsFirstLevelExpParserRuleCall_1_1_0() { return cArgsFirstLevelExpParserRuleCall_1_1_0; }
	}

	public class SecondLevelExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SecondLevelExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArgsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArgsThirdLevelExpParserRuleCall_0_0 = (RuleCall)cArgsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpSecondLevelOpEnumRuleCall_1_0_0 = (RuleCall)cOpAssignment_1_0.eContents().get(0);
		private final Assignment cArgsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgsSecondLevelExpParserRuleCall_1_1_0 = (RuleCall)cArgsAssignment_1_1.eContents().get(0);
		
		//SecondLevelExp:
		//	args+=ThirdLevelExp (op=SecondLevelOp args+=SecondLevelExp)?;
		@Override public ParserRule getRule() { return rule; }

		//args+=ThirdLevelExp (op=SecondLevelOp args+=SecondLevelExp)?
		public Group getGroup() { return cGroup; }

		//args+=ThirdLevelExp
		public Assignment getArgsAssignment_0() { return cArgsAssignment_0; }

		//ThirdLevelExp
		public RuleCall getArgsThirdLevelExpParserRuleCall_0_0() { return cArgsThirdLevelExpParserRuleCall_0_0; }

		//(op=SecondLevelOp args+=SecondLevelExp)?
		public Group getGroup_1() { return cGroup_1; }

		//op=SecondLevelOp
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }

		//SecondLevelOp
		public RuleCall getOpSecondLevelOpEnumRuleCall_1_0_0() { return cOpSecondLevelOpEnumRuleCall_1_0_0; }

		//args+=SecondLevelExp
		public Assignment getArgsAssignment_1_1() { return cArgsAssignment_1_1; }

		//SecondLevelExp
		public RuleCall getArgsSecondLevelExpParserRuleCall_1_1_0() { return cArgsSecondLevelExpParserRuleCall_1_1_0; }
	}

	public class ThirdLevelExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ThirdLevelExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArgsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArgsFourthLevelExpParserRuleCall_0_0 = (RuleCall)cArgsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpThirdLevelOpEnumRuleCall_1_0_0 = (RuleCall)cOpAssignment_1_0.eContents().get(0);
		private final Assignment cArgsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgsThirdLevelExpParserRuleCall_1_1_0 = (RuleCall)cArgsAssignment_1_1.eContents().get(0);
		
		//ThirdLevelExp:
		//	args+=FourthLevelExp (op=ThirdLevelOp args+=ThirdLevelExp)?;
		@Override public ParserRule getRule() { return rule; }

		//args+=FourthLevelExp (op=ThirdLevelOp args+=ThirdLevelExp)?
		public Group getGroup() { return cGroup; }

		//args+=FourthLevelExp
		public Assignment getArgsAssignment_0() { return cArgsAssignment_0; }

		//FourthLevelExp
		public RuleCall getArgsFourthLevelExpParserRuleCall_0_0() { return cArgsFourthLevelExpParserRuleCall_0_0; }

		//(op=ThirdLevelOp args+=ThirdLevelExp)?
		public Group getGroup_1() { return cGroup_1; }

		//op=ThirdLevelOp
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }

		//ThirdLevelOp
		public RuleCall getOpThirdLevelOpEnumRuleCall_1_0_0() { return cOpThirdLevelOpEnumRuleCall_1_0_0; }

		//args+=ThirdLevelExp
		public Assignment getArgsAssignment_1_1() { return cArgsAssignment_1_1; }

		//ThirdLevelExp
		public RuleCall getArgsThirdLevelExpParserRuleCall_1_1_0() { return cArgsThirdLevelExpParserRuleCall_1_1_0; }
	}

	public class FourthLevelExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FourthLevelExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArgsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArgsTermParserRuleCall_0_0 = (RuleCall)cArgsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpFourthLevelOpEnumRuleCall_1_0_0 = (RuleCall)cOpAssignment_1_0.eContents().get(0);
		private final Assignment cArgsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgsFourthLevelExpParserRuleCall_1_1_0 = (RuleCall)cArgsAssignment_1_1.eContents().get(0);
		
		//FourthLevelExp:
		//	args+=Term (op=FourthLevelOp args+=FourthLevelExp)?;
		@Override public ParserRule getRule() { return rule; }

		//args+=Term (op=FourthLevelOp args+=FourthLevelExp)?
		public Group getGroup() { return cGroup; }

		//args+=Term
		public Assignment getArgsAssignment_0() { return cArgsAssignment_0; }

		//Term
		public RuleCall getArgsTermParserRuleCall_0_0() { return cArgsTermParserRuleCall_0_0; }

		//(op=FourthLevelOp args+=FourthLevelExp)?
		public Group getGroup_1() { return cGroup_1; }

		//op=FourthLevelOp
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }

		//FourthLevelOp
		public RuleCall getOpFourthLevelOpEnumRuleCall_1_0_0() { return cOpFourthLevelOpEnumRuleCall_1_0_0; }

		//args+=FourthLevelExp
		public Assignment getArgsAssignment_1_1() { return cArgsAssignment_1_1; }

		//FourthLevelExp
		public RuleCall getArgsFourthLevelExpParserRuleCall_1_1_0() { return cArgsFourthLevelExpParserRuleCall_1_1_0; }
	}

	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Term");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMyIntegerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMyStringParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMyBoolParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMyVariableParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cListParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cFunctionCallParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cIfControlFlowParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cBracketExpressionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//Term:
		//	MyInteger | MyString | MyBool | MyVariable | List | FunctionCall | IfControlFlow | BracketExpression;
		@Override public ParserRule getRule() { return rule; }

		//MyInteger | MyString | MyBool | MyVariable | List | FunctionCall | IfControlFlow | BracketExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//MyInteger
		public RuleCall getMyIntegerParserRuleCall_0() { return cMyIntegerParserRuleCall_0; }

		//MyString
		public RuleCall getMyStringParserRuleCall_1() { return cMyStringParserRuleCall_1; }

		//MyBool
		public RuleCall getMyBoolParserRuleCall_2() { return cMyBoolParserRuleCall_2; }

		//MyVariable
		public RuleCall getMyVariableParserRuleCall_3() { return cMyVariableParserRuleCall_3; }

		//List
		public RuleCall getListParserRuleCall_4() { return cListParserRuleCall_4; }

		//FunctionCall
		public RuleCall getFunctionCallParserRuleCall_5() { return cFunctionCallParserRuleCall_5; }

		//IfControlFlow
		public RuleCall getIfControlFlowParserRuleCall_6() { return cIfControlFlowParserRuleCall_6; }

		//BracketExpression
		public RuleCall getBracketExpressionParserRuleCall_7() { return cBracketExpressionParserRuleCall_7; }
	}

	public class BracketExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BracketExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//BracketExpression:
		//	"(" exp=Expression ")";
		@Override public ParserRule getRule() { return rule; }

		//"(" exp=Expression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//exp=Expression
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }

		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_0() { return cExpExpressionParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class MyIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MyInteger");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPosIntegerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNegIntegerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//MyInteger:
		//	PosInteger | NegInteger;
		@Override public ParserRule getRule() { return rule; }

		//PosInteger | NegInteger
		public Alternatives getAlternatives() { return cAlternatives; }

		//PosInteger
		public RuleCall getPosIntegerParserRuleCall_0() { return cPosIntegerParserRuleCall_0; }

		//NegInteger
		public RuleCall getNegIntegerParserRuleCall_1() { return cNegIntegerParserRuleCall_1; }
	}

	public class PosIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PosInteger");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValINTTerminalRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//PosInteger:
		//	val=INT;
		@Override public ParserRule getRule() { return rule; }

		//val=INT
		public Assignment getValAssignment() { return cValAssignment; }

		//INT
		public RuleCall getValINTTerminalRuleCall_0() { return cValINTTerminalRuleCall_0; }
	}

	public class NegIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NegInteger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValINTTerminalRuleCall_1_0 = (RuleCall)cValAssignment_1.eContents().get(0);
		
		//NegInteger:
		//	"-" val=INT;
		@Override public ParserRule getRule() { return rule; }

		//"-" val=INT
		public Group getGroup() { return cGroup; }

		//"-"
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//val=INT
		public Assignment getValAssignment_1() { return cValAssignment_1; }

		//INT
		public RuleCall getValINTTerminalRuleCall_1_0() { return cValINTTerminalRuleCall_1_0; }
	}

	public class MyVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MyVariable");
		private final Assignment cVarAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cVarIDFUNCVARTerminalRuleCall_0 = (RuleCall)cVarAssignment.eContents().get(0);
		
		//MyVariable:
		//	var=IDFUNCVAR;
		@Override public ParserRule getRule() { return rule; }

		//var=IDFUNCVAR
		public Assignment getVarAssignment() { return cVarAssignment; }

		//IDFUNCVAR
		public RuleCall getVarIDFUNCVARTerminalRuleCall_0() { return cVarIDFUNCVARTerminalRuleCall_0; }
	}

	public class MyBoolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MyBool");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPosBoolParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNegBoolParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//MyBool:
		//	PosBool | NegBool;
		@Override public ParserRule getRule() { return rule; }

		//PosBool | NegBool
		public Alternatives getAlternatives() { return cAlternatives; }

		//PosBool
		public RuleCall getPosBoolParserRuleCall_0() { return cPosBoolParserRuleCall_0; }

		//NegBool
		public RuleCall getNegBoolParserRuleCall_1() { return cNegBoolParserRuleCall_1; }
	}

	public class PosBoolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PosBool");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValBoolEnumRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//PosBool:
		//	val=Bool;
		@Override public ParserRule getRule() { return rule; }

		//val=Bool
		public Assignment getValAssignment() { return cValAssignment; }

		//Bool
		public RuleCall getValBoolEnumRuleCall_0() { return cValBoolEnumRuleCall_0; }
	}

	public class NegBoolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NegBool");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValBoolEnumRuleCall_1_0 = (RuleCall)cValAssignment_1.eContents().get(0);
		
		//NegBool:
		//	"!" val=Bool;
		@Override public ParserRule getRule() { return rule; }

		//"!" val=Bool
		public Group getGroup() { return cGroup; }

		//"!"
		public Keyword getExclamationMarkKeyword_0() { return cExclamationMarkKeyword_0; }

		//val=Bool
		public Assignment getValAssignment_1() { return cValAssignment_1; }

		//Bool
		public RuleCall getValBoolEnumRuleCall_1_0() { return cValBoolEnumRuleCall_1_0; }
	}

	public class MyStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MyString");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValSTRINGTerminalRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//MyString:
		//	val=STRING;
		@Override public ParserRule getRule() { return rule; }

		//val=STRING
		public Assignment getValAssignment() { return cValAssignment; }

		//STRING
		public RuleCall getValSTRINGTerminalRuleCall_0() { return cValSTRINGTerminalRuleCall_0; }
	}

	public class IfControlFlowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfControlFlow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCondAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCondExpressionParserRuleCall_2_0 = (RuleCall)cCondAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIftrueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIftrueExpressionParserRuleCall_4_0 = (RuleCall)cIftrueAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cIffalseAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cIffalseExpressionParserRuleCall_6_0 = (RuleCall)cIffalseAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//IfControlFlow:
		//	"if" "(" cond=Expression "," iftrue=Expression "," iffalse=Expression ")";
		@Override public ParserRule getRule() { return rule; }

		//"if" "(" cond=Expression "," iftrue=Expression "," iffalse=Expression ")"
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//cond=Expression
		public Assignment getCondAssignment_2() { return cCondAssignment_2; }

		//Expression
		public RuleCall getCondExpressionParserRuleCall_2_0() { return cCondExpressionParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//iftrue=Expression
		public Assignment getIftrueAssignment_4() { return cIftrueAssignment_4; }

		//Expression
		public RuleCall getIftrueExpressionParserRuleCall_4_0() { return cIftrueExpressionParserRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//iffalse=Expression
		public Assignment getIffalseAssignment_6() { return cIffalseAssignment_6; }

		//Expression
		public RuleCall getIffalseExpressionParserRuleCall_6_0() { return cIffalseExpressionParserRuleCall_6_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}

	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionCall");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPreDefFunctionCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUserDefFunctionCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//FunctionCall:
		//	PreDefFunctionCall | UserDefFunctionCall;
		@Override public ParserRule getRule() { return rule; }

		//PreDefFunctionCall | UserDefFunctionCall
		public Alternatives getAlternatives() { return cAlternatives; }

		//PreDefFunctionCall
		public RuleCall getPreDefFunctionCallParserRuleCall_0() { return cPreDefFunctionCallParserRuleCall_0; }

		//UserDefFunctionCall
		public RuleCall getUserDefFunctionCallParserRuleCall_1() { return cUserDefFunctionCallParserRuleCall_1; }
	}

	public class PreDefFunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PreDefFunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFunctionPDFunctionEnumRuleCall_0_0 = (RuleCall)cFunctionAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgsExpressionParserRuleCall_2_0_0 = (RuleCall)cArgsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_2_1_1_0 = (RuleCall)cArgsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//PreDefFunctionCall:
		//	function=PDFunction "(" (args+=Expression ("," args+=Expression)*)? ")";
		@Override public ParserRule getRule() { return rule; }

		//function=PDFunction "(" (args+=Expression ("," args+=Expression)*)? ")"
		public Group getGroup() { return cGroup; }

		//function=PDFunction
		public Assignment getFunctionAssignment_0() { return cFunctionAssignment_0; }

		//PDFunction
		public RuleCall getFunctionPDFunctionEnumRuleCall_0_0() { return cFunctionPDFunctionEnumRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(args+=Expression ("," args+=Expression)*)?
		public Group getGroup_2() { return cGroup_2; }

		//args+=Expression
		public Assignment getArgsAssignment_2_0() { return cArgsAssignment_2_0; }

		//Expression
		public RuleCall getArgsExpressionParserRuleCall_2_0_0() { return cArgsExpressionParserRuleCall_2_0_0; }

		//("," args+=Expression)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//args+=Expression
		public Assignment getArgsAssignment_2_1_1() { return cArgsAssignment_2_1_1; }

		//Expression
		public RuleCall getArgsExpressionParserRuleCall_2_1_1_0() { return cArgsExpressionParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class UserDefFunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UserDefFunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFunctionFunctionDefinitionCrossReference_0_0 = (CrossReference)cFunctionAssignment_0.eContents().get(0);
		private final RuleCall cFunctionFunctionDefinitionIDFUNCVARTerminalRuleCall_0_0_1 = (RuleCall)cFunctionFunctionDefinitionCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgsExpressionParserRuleCall_2_0_0 = (RuleCall)cArgsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_2_1_1_0 = (RuleCall)cArgsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//UserDefFunctionCall:
		//	function=[FunctionDefinition|IDFUNCVAR] "(" (args+=Expression ("," args+=Expression)*)? ")";
		@Override public ParserRule getRule() { return rule; }

		//function=[FunctionDefinition|IDFUNCVAR] "(" (args+=Expression ("," args+=Expression)*)? ")"
		public Group getGroup() { return cGroup; }

		//function=[FunctionDefinition|IDFUNCVAR]
		public Assignment getFunctionAssignment_0() { return cFunctionAssignment_0; }

		//[FunctionDefinition|IDFUNCVAR]
		public CrossReference getFunctionFunctionDefinitionCrossReference_0_0() { return cFunctionFunctionDefinitionCrossReference_0_0; }

		//IDFUNCVAR
		public RuleCall getFunctionFunctionDefinitionIDFUNCVARTerminalRuleCall_0_0_1() { return cFunctionFunctionDefinitionIDFUNCVARTerminalRuleCall_0_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(args+=Expression ("," args+=Expression)*)?
		public Group getGroup_2() { return cGroup_2; }

		//args+=Expression
		public Assignment getArgsAssignment_2_0() { return cArgsAssignment_2_0; }

		//Expression
		public RuleCall getArgsExpressionParserRuleCall_2_0_0() { return cArgsExpressionParserRuleCall_2_0_0; }

		//("," args+=Expression)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//args+=Expression
		public Assignment getArgsAssignment_2_1_1() { return cArgsAssignment_2_1_1; }

		//Expression
		public RuleCall getArgsExpressionParserRuleCall_2_1_1_0() { return cArgsExpressionParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "List");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cIntListAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cElemsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cElemsListElemParserRuleCall_2_0_0 = (RuleCall)cElemsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cElemsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cElemsListElemParserRuleCall_2_1_1_0 = (RuleCall)cElemsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//List:
		//	"[" {IntList} (elems+=ListElem+ ("," elems+=ListElem)*)? "]";
		@Override public ParserRule getRule() { return rule; }

		//"[" {IntList} (elems+=ListElem+ ("," elems+=ListElem)*)? "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//{IntList}
		public Action getIntListAction_1() { return cIntListAction_1; }

		//(elems+=ListElem+ ("," elems+=ListElem)*)?
		public Group getGroup_2() { return cGroup_2; }

		//elems+=ListElem+
		public Assignment getElemsAssignment_2_0() { return cElemsAssignment_2_0; }

		//ListElem
		public RuleCall getElemsListElemParserRuleCall_2_0_0() { return cElemsListElemParserRuleCall_2_0_0; }

		//("," elems+=ListElem)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//elems+=ListElem
		public Assignment getElemsAssignment_2_1_1() { return cElemsAssignment_2_1_1; }

		//ListElem
		public RuleCall getElemsListElemParserRuleCall_2_1_1_0() { return cElemsListElemParserRuleCall_2_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class ListElemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListElem");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMyIntegerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMyVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ListElem:
		//	MyInteger | MyVariable;
		@Override public ParserRule getRule() { return rule; }

		//MyInteger | MyVariable
		public Alternatives getAlternatives() { return cAlternatives; }

		//MyInteger
		public RuleCall getMyIntegerParserRuleCall_0() { return cMyIntegerParserRuleCall_0; }

		//MyVariable
		public RuleCall getMyVariableParserRuleCall_1() { return cMyVariableParserRuleCall_1; }
	}
	
	
	public class BoolElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Bool");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTrueEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTrueTrueKeyword_0_0 = (Keyword)cTrueEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFalseEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFalseFalseKeyword_1_0 = (Keyword)cFalseEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Bool:
		//	true | false;
		public EnumRule getRule() { return rule; }

		//true | false
		public Alternatives getAlternatives() { return cAlternatives; }

		//true
		public EnumLiteralDeclaration getTrueEnumLiteralDeclaration_0() { return cTrueEnumLiteralDeclaration_0; }

		//"true"
		public Keyword getTrueTrueKeyword_0_0() { return cTrueTrueKeyword_0_0; }

		//false
		public EnumLiteralDeclaration getFalseEnumLiteralDeclaration_1() { return cFalseEnumLiteralDeclaration_1; }

		//"false"
		public Keyword getFalseFalseKeyword_1_0() { return cFalseFalseKeyword_1_0; }
	}

	public class PDFunctionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "PDFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLengthEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLengthLengthKeyword_0_0 = (Keyword)cLengthEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cConsEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cConsConsKeyword_1_0 = (Keyword)cConsEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCarEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCarCarKeyword_2_0 = (Keyword)cCarEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cCdrEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cCdrCdrKeyword_3_0 = (Keyword)cCdrEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cIsEmptyEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cIsEmptyIsEmptyKeyword_4_0 = (Keyword)cIsEmptyEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cShowEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cShowShowKeyword_5_0 = (Keyword)cShowEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum PDFunction:
		//	length | cons | car | cdr | isEmpty | show;
		public EnumRule getRule() { return rule; }

		//length | cons | car | cdr | isEmpty | show
		public Alternatives getAlternatives() { return cAlternatives; }

		//length
		public EnumLiteralDeclaration getLengthEnumLiteralDeclaration_0() { return cLengthEnumLiteralDeclaration_0; }

		//"length"
		public Keyword getLengthLengthKeyword_0_0() { return cLengthLengthKeyword_0_0; }

		//cons
		public EnumLiteralDeclaration getConsEnumLiteralDeclaration_1() { return cConsEnumLiteralDeclaration_1; }

		//"cons"
		public Keyword getConsConsKeyword_1_0() { return cConsConsKeyword_1_0; }

		//car
		public EnumLiteralDeclaration getCarEnumLiteralDeclaration_2() { return cCarEnumLiteralDeclaration_2; }

		//"car"
		public Keyword getCarCarKeyword_2_0() { return cCarCarKeyword_2_0; }

		//cdr
		public EnumLiteralDeclaration getCdrEnumLiteralDeclaration_3() { return cCdrEnumLiteralDeclaration_3; }

		//"cdr"
		public Keyword getCdrCdrKeyword_3_0() { return cCdrCdrKeyword_3_0; }

		//isEmpty
		public EnumLiteralDeclaration getIsEmptyEnumLiteralDeclaration_4() { return cIsEmptyEnumLiteralDeclaration_4; }

		//"isEmpty"
		public Keyword getIsEmptyIsEmptyKeyword_4_0() { return cIsEmptyIsEmptyKeyword_4_0; }

		//show
		public EnumLiteralDeclaration getShowEnumLiteralDeclaration_5() { return cShowEnumLiteralDeclaration_5; }

		//"show"
		public Keyword getShowShowKeyword_5_0() { return cShowShowKeyword_5_0; }
	}

	public class FirstLevelOpElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "FirstLevelOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAndEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAndAmpersandKeyword_0_0 = (Keyword)cAndEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOrEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOrVerticalLineKeyword_1_0 = (Keyword)cOrEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum FirstLevelOp:
		//	and="&" | or="|";
		public EnumRule getRule() { return rule; }

		//and="&" | or="|"
		public Alternatives getAlternatives() { return cAlternatives; }

		//and="&"
		public EnumLiteralDeclaration getAndEnumLiteralDeclaration_0() { return cAndEnumLiteralDeclaration_0; }

		//"&"
		public Keyword getAndAmpersandKeyword_0_0() { return cAndAmpersandKeyword_0_0; }

		//or="|"
		public EnumLiteralDeclaration getOrEnumLiteralDeclaration_1() { return cOrEnumLiteralDeclaration_1; }

		//"|"
		public Keyword getOrVerticalLineKeyword_1_0() { return cOrVerticalLineKeyword_1_0; }
	}

	public class SecondLevelOpElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "SecondLevelOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cGtEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cGtGreaterThanSignKeyword_0_0 = (Keyword)cGtEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLtEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLtLessThanSignKeyword_1_0 = (Keyword)cLtEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEqEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEqEqualsSignEqualsSignKeyword_2_0 = (Keyword)cEqEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum SecondLevelOp:
		//	gt=">" | lt="<" | eq="==";
		public EnumRule getRule() { return rule; }

		//gt=">" | lt="<" | eq="=="
		public Alternatives getAlternatives() { return cAlternatives; }

		//gt=">"
		public EnumLiteralDeclaration getGtEnumLiteralDeclaration_0() { return cGtEnumLiteralDeclaration_0; }

		//">"
		public Keyword getGtGreaterThanSignKeyword_0_0() { return cGtGreaterThanSignKeyword_0_0; }

		//lt="<"
		public EnumLiteralDeclaration getLtEnumLiteralDeclaration_1() { return cLtEnumLiteralDeclaration_1; }

		//"<"
		public Keyword getLtLessThanSignKeyword_1_0() { return cLtLessThanSignKeyword_1_0; }

		//eq="=="
		public EnumLiteralDeclaration getEqEnumLiteralDeclaration_2() { return cEqEnumLiteralDeclaration_2; }

		//"=="
		public Keyword getEqEqualsSignEqualsSignKeyword_2_0() { return cEqEqualsSignEqualsSignKeyword_2_0; }
	}

	public class ThirdLevelOpElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ThirdLevelOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPlusEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPlusPlusSignKeyword_0_0 = (Keyword)cPlusEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMinusEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMinusHyphenMinusKeyword_1_0 = (Keyword)cMinusEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cConcatEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cConcatPlusSignPlusSignKeyword_2_0 = (Keyword)cConcatEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ThirdLevelOp:
		//	plus="+" | minus="-" | concat="++";
		public EnumRule getRule() { return rule; }

		//plus="+" | minus="-" | concat="++"
		public Alternatives getAlternatives() { return cAlternatives; }

		//plus="+"
		public EnumLiteralDeclaration getPlusEnumLiteralDeclaration_0() { return cPlusEnumLiteralDeclaration_0; }

		//"+"
		public Keyword getPlusPlusSignKeyword_0_0() { return cPlusPlusSignKeyword_0_0; }

		//minus="-"
		public EnumLiteralDeclaration getMinusEnumLiteralDeclaration_1() { return cMinusEnumLiteralDeclaration_1; }

		//"-"
		public Keyword getMinusHyphenMinusKeyword_1_0() { return cMinusHyphenMinusKeyword_1_0; }

		//concat="++"
		public EnumLiteralDeclaration getConcatEnumLiteralDeclaration_2() { return cConcatEnumLiteralDeclaration_2; }

		//"++"
		public Keyword getConcatPlusSignPlusSignKeyword_2_0() { return cConcatPlusSignPlusSignKeyword_2_0; }
	}

	public class FourthLevelOpElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "FourthLevelOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMultEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMultAsteriskKeyword_0_0 = (Keyword)cMultEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDivEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDivSolidusKeyword_1_0 = (Keyword)cDivEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum FourthLevelOp:
		//	mult="*" | div="/";
		public EnumRule getRule() { return rule; }

		//mult="*" | div="/"
		public Alternatives getAlternatives() { return cAlternatives; }

		//mult="*"
		public EnumLiteralDeclaration getMultEnumLiteralDeclaration_0() { return cMultEnumLiteralDeclaration_0; }

		//"*"
		public Keyword getMultAsteriskKeyword_0_0() { return cMultAsteriskKeyword_0_0; }

		//div="/"
		public EnumLiteralDeclaration getDivEnumLiteralDeclaration_1() { return cDivEnumLiteralDeclaration_1; }

		//"/"
		public Keyword getDivSolidusKeyword_1_0() { return cDivSolidusKeyword_1_0; }
	}
	
	private final ListaElements pLista;
	private final EvaluationElements pEvaluation;
	private final FunctionDefinitionElements pFunctionDefinition;
	private final ExpressionElements pExpression;
	private final FirstLevelExpElements pFirstLevelExp;
	private final SecondLevelExpElements pSecondLevelExp;
	private final ThirdLevelExpElements pThirdLevelExp;
	private final FourthLevelExpElements pFourthLevelExp;
	private final TermElements pTerm;
	private final BracketExpressionElements pBracketExpression;
	private final MyIntegerElements pMyInteger;
	private final PosIntegerElements pPosInteger;
	private final NegIntegerElements pNegInteger;
	private final MyVariableElements pMyVariable;
	private final MyBoolElements pMyBool;
	private final PosBoolElements pPosBool;
	private final NegBoolElements pNegBool;
	private final MyStringElements pMyString;
	private final IfControlFlowElements pIfControlFlow;
	private final FunctionCallElements pFunctionCall;
	private final PreDefFunctionCallElements pPreDefFunctionCall;
	private final UserDefFunctionCallElements pUserDefFunctionCall;
	private final ListElements pList;
	private final ListElemElements pListElem;
	private final BoolElements unknownRuleBool;
	private final PDFunctionElements unknownRulePDFunction;
	private final FirstLevelOpElements unknownRuleFirstLevelOp;
	private final SecondLevelOpElements unknownRuleSecondLevelOp;
	private final ThirdLevelOpElements unknownRuleThirdLevelOp;
	private final FourthLevelOpElements unknownRuleFourthLevelOp;
	private final TerminalRule tIDFUNCVAR;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ListaCompilerGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pLista = new ListaElements();
		this.pEvaluation = new EvaluationElements();
		this.pFunctionDefinition = new FunctionDefinitionElements();
		this.pExpression = new ExpressionElements();
		this.pFirstLevelExp = new FirstLevelExpElements();
		this.pSecondLevelExp = new SecondLevelExpElements();
		this.pThirdLevelExp = new ThirdLevelExpElements();
		this.pFourthLevelExp = new FourthLevelExpElements();
		this.pTerm = new TermElements();
		this.pBracketExpression = new BracketExpressionElements();
		this.pMyInteger = new MyIntegerElements();
		this.pPosInteger = new PosIntegerElements();
		this.pNegInteger = new NegIntegerElements();
		this.pMyVariable = new MyVariableElements();
		this.pMyBool = new MyBoolElements();
		this.pPosBool = new PosBoolElements();
		this.pNegBool = new NegBoolElements();
		this.pMyString = new MyStringElements();
		this.pIfControlFlow = new IfControlFlowElements();
		this.pFunctionCall = new FunctionCallElements();
		this.pPreDefFunctionCall = new PreDefFunctionCallElements();
		this.pUserDefFunctionCall = new UserDefFunctionCallElements();
		this.pList = new ListElements();
		this.pListElem = new ListElemElements();
		this.unknownRuleBool = new BoolElements();
		this.unknownRulePDFunction = new PDFunctionElements();
		this.unknownRuleFirstLevelOp = new FirstLevelOpElements();
		this.unknownRuleSecondLevelOp = new SecondLevelOpElements();
		this.unknownRuleThirdLevelOp = new ThirdLevelOpElements();
		this.unknownRuleFourthLevelOp = new FourthLevelOpElements();
		this.tIDFUNCVAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IDFUNCVAR");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("edu.upb.compilacion.ListaCompiler".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Lista:
	//	(definitions+=FunctionDefinition | evaluations+=Evaluation)+;
	public ListaElements getListaAccess() {
		return pLista;
	}
	
	public ParserRule getListaRule() {
		return getListaAccess().getRule();
	}

	//Evaluation:
	//	"?" return=Expression ";";
	public EvaluationElements getEvaluationAccess() {
		return pEvaluation;
	}
	
	public ParserRule getEvaluationRule() {
		return getEvaluationAccess().getRule();
	}

	//FunctionDefinition:
	//	name=IDFUNCVAR "(" (params+=IDFUNCVAR ("," params+=IDFUNCVAR)*)? ")" "=" return=Expression ";";
	public FunctionDefinitionElements getFunctionDefinitionAccess() {
		return pFunctionDefinition;
	}
	
	public ParserRule getFunctionDefinitionRule() {
		return getFunctionDefinitionAccess().getRule();
	}

	//Expression:
	//	exp=FirstLevelExp;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//FirstLevelExp:
	//	args+=SecondLevelExp (op=FirstLevelOp args+=FirstLevelExp)?;
	public FirstLevelExpElements getFirstLevelExpAccess() {
		return pFirstLevelExp;
	}
	
	public ParserRule getFirstLevelExpRule() {
		return getFirstLevelExpAccess().getRule();
	}

	//SecondLevelExp:
	//	args+=ThirdLevelExp (op=SecondLevelOp args+=SecondLevelExp)?;
	public SecondLevelExpElements getSecondLevelExpAccess() {
		return pSecondLevelExp;
	}
	
	public ParserRule getSecondLevelExpRule() {
		return getSecondLevelExpAccess().getRule();
	}

	//ThirdLevelExp:
	//	args+=FourthLevelExp (op=ThirdLevelOp args+=ThirdLevelExp)?;
	public ThirdLevelExpElements getThirdLevelExpAccess() {
		return pThirdLevelExp;
	}
	
	public ParserRule getThirdLevelExpRule() {
		return getThirdLevelExpAccess().getRule();
	}

	//FourthLevelExp:
	//	args+=Term (op=FourthLevelOp args+=FourthLevelExp)?;
	public FourthLevelExpElements getFourthLevelExpAccess() {
		return pFourthLevelExp;
	}
	
	public ParserRule getFourthLevelExpRule() {
		return getFourthLevelExpAccess().getRule();
	}

	//Term:
	//	MyInteger | MyString | MyBool | MyVariable | List | FunctionCall | IfControlFlow | BracketExpression;
	public TermElements getTermAccess() {
		return pTerm;
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}

	//BracketExpression:
	//	"(" exp=Expression ")";
	public BracketExpressionElements getBracketExpressionAccess() {
		return pBracketExpression;
	}
	
	public ParserRule getBracketExpressionRule() {
		return getBracketExpressionAccess().getRule();
	}

	//MyInteger:
	//	PosInteger | NegInteger;
	public MyIntegerElements getMyIntegerAccess() {
		return pMyInteger;
	}
	
	public ParserRule getMyIntegerRule() {
		return getMyIntegerAccess().getRule();
	}

	//PosInteger:
	//	val=INT;
	public PosIntegerElements getPosIntegerAccess() {
		return pPosInteger;
	}
	
	public ParserRule getPosIntegerRule() {
		return getPosIntegerAccess().getRule();
	}

	//NegInteger:
	//	"-" val=INT;
	public NegIntegerElements getNegIntegerAccess() {
		return pNegInteger;
	}
	
	public ParserRule getNegIntegerRule() {
		return getNegIntegerAccess().getRule();
	}

	//MyVariable:
	//	var=IDFUNCVAR;
	public MyVariableElements getMyVariableAccess() {
		return pMyVariable;
	}
	
	public ParserRule getMyVariableRule() {
		return getMyVariableAccess().getRule();
	}

	//MyBool:
	//	PosBool | NegBool;
	public MyBoolElements getMyBoolAccess() {
		return pMyBool;
	}
	
	public ParserRule getMyBoolRule() {
		return getMyBoolAccess().getRule();
	}

	//PosBool:
	//	val=Bool;
	public PosBoolElements getPosBoolAccess() {
		return pPosBool;
	}
	
	public ParserRule getPosBoolRule() {
		return getPosBoolAccess().getRule();
	}

	//NegBool:
	//	"!" val=Bool;
	public NegBoolElements getNegBoolAccess() {
		return pNegBool;
	}
	
	public ParserRule getNegBoolRule() {
		return getNegBoolAccess().getRule();
	}

	//MyString:
	//	val=STRING;
	public MyStringElements getMyStringAccess() {
		return pMyString;
	}
	
	public ParserRule getMyStringRule() {
		return getMyStringAccess().getRule();
	}

	//IfControlFlow:
	//	"if" "(" cond=Expression "," iftrue=Expression "," iffalse=Expression ")";
	public IfControlFlowElements getIfControlFlowAccess() {
		return pIfControlFlow;
	}
	
	public ParserRule getIfControlFlowRule() {
		return getIfControlFlowAccess().getRule();
	}

	//FunctionCall:
	//	PreDefFunctionCall | UserDefFunctionCall;
	public FunctionCallElements getFunctionCallAccess() {
		return pFunctionCall;
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}

	//PreDefFunctionCall:
	//	function=PDFunction "(" (args+=Expression ("," args+=Expression)*)? ")";
	public PreDefFunctionCallElements getPreDefFunctionCallAccess() {
		return pPreDefFunctionCall;
	}
	
	public ParserRule getPreDefFunctionCallRule() {
		return getPreDefFunctionCallAccess().getRule();
	}

	//UserDefFunctionCall:
	//	function=[FunctionDefinition|IDFUNCVAR] "(" (args+=Expression ("," args+=Expression)*)? ")";
	public UserDefFunctionCallElements getUserDefFunctionCallAccess() {
		return pUserDefFunctionCall;
	}
	
	public ParserRule getUserDefFunctionCallRule() {
		return getUserDefFunctionCallAccess().getRule();
	}

	//List:
	//	"[" {IntList} (elems+=ListElem+ ("," elems+=ListElem)*)? "]";
	public ListElements getListAccess() {
		return pList;
	}
	
	public ParserRule getListRule() {
		return getListAccess().getRule();
	}

	//ListElem:
	//	MyInteger | MyVariable;
	public ListElemElements getListElemAccess() {
		return pListElem;
	}
	
	public ParserRule getListElemRule() {
		return getListElemAccess().getRule();
	}

	//enum Bool:
	//	true | false;
	public BoolElements getBoolAccess() {
		return unknownRuleBool;
	}
	
	public EnumRule getBoolRule() {
		return getBoolAccess().getRule();
	}

	//enum PDFunction:
	//	length | cons | car | cdr | isEmpty | show;
	public PDFunctionElements getPDFunctionAccess() {
		return unknownRulePDFunction;
	}
	
	public EnumRule getPDFunctionRule() {
		return getPDFunctionAccess().getRule();
	}

	//enum FirstLevelOp:
	//	and="&" | or="|";
	public FirstLevelOpElements getFirstLevelOpAccess() {
		return unknownRuleFirstLevelOp;
	}
	
	public EnumRule getFirstLevelOpRule() {
		return getFirstLevelOpAccess().getRule();
	}

	//enum SecondLevelOp:
	//	gt=">" | lt="<" | eq="==";
	public SecondLevelOpElements getSecondLevelOpAccess() {
		return unknownRuleSecondLevelOp;
	}
	
	public EnumRule getSecondLevelOpRule() {
		return getSecondLevelOpAccess().getRule();
	}

	//enum ThirdLevelOp:
	//	plus="+" | minus="-" | concat="++";
	public ThirdLevelOpElements getThirdLevelOpAccess() {
		return unknownRuleThirdLevelOp;
	}
	
	public EnumRule getThirdLevelOpRule() {
		return getThirdLevelOpAccess().getRule();
	}

	//enum FourthLevelOp:
	//	mult="*" | div="/";
	public FourthLevelOpElements getFourthLevelOpAccess() {
		return unknownRuleFourthLevelOp;
	}
	
	public EnumRule getFourthLevelOpRule() {
		return getFourthLevelOpAccess().getRule();
	}

	//terminal IDFUNCVAR:
	//	"a".."z" ("A".."Z" | "a".."z" | "0".."9")*;
	public TerminalRule getIDFUNCVARRule() {
		return tIDFUNCVAR;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
