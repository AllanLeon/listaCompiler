/*
 * generated by Xtext
 */
grammar InternalListaCompiler;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package edu.upb.compilacion.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package edu.upb.compilacion.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import edu.upb.compilacion.services.ListaCompilerGrammarAccess;

}

@parser::members {
 
 	private ListaCompilerGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(ListaCompilerGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleLista
entryRuleLista 
:
{ before(grammarAccess.getListaRule()); }
	 ruleLista
{ after(grammarAccess.getListaRule()); } 
	 EOF 
;

// Rule Lista
ruleLista
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getListaAccess().getGroup()); }
(rule__Lista__Group__0)
{ after(grammarAccess.getListaAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Lista__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Lista__Group__0__Impl
	rule__Lista__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Lista__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListaAccess().getHoliKeyword_0()); }

	'Holi' 

{ after(grammarAccess.getListaAccess().getHoliKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Lista__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Lista__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Lista__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListaAccess().getNameAssignment_1()); }
(rule__Lista__NameAssignment_1)
{ after(grammarAccess.getListaAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Lista__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListaAccess().getNameSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getListaAccess().getNameSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_INTEGER : '-'? RULE_INT;

RULE_BOOL : ('true'|'false');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


