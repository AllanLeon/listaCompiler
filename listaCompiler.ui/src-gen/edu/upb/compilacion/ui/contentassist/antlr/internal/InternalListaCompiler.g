/*
 * generated by Xtext
 */
grammar InternalListaCompiler;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package edu.upb.compilacion.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package edu.upb.compilacion.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import edu.upb.compilacion.services.ListaCompilerGrammarAccess;

}

@parser::members {
 
 	private ListaCompilerGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(ListaCompilerGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleLista
entryRuleLista 
:
{ before(grammarAccess.getListaRule()); }
	 ruleLista
{ after(grammarAccess.getListaRule()); } 
	 EOF 
;

// Rule Lista
ruleLista
    @init {
		int stackSize = keepStackSize();
    }
	:
(
(
{ before(grammarAccess.getListaAccess().getAlternatives()); }
(rule__Lista__Alternatives)
{ after(grammarAccess.getListaAccess().getAlternatives()); }
)
(
{ before(grammarAccess.getListaAccess().getAlternatives()); }
(rule__Lista__Alternatives)*
{ after(grammarAccess.getListaAccess().getAlternatives()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEvaluation
entryRuleEvaluation 
:
{ before(grammarAccess.getEvaluationRule()); }
	 ruleEvaluation
{ after(grammarAccess.getEvaluationRule()); } 
	 EOF 
;

// Rule Evaluation
ruleEvaluation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEvaluationAccess().getGroup()); }
(rule__Evaluation__Group__0)
{ after(grammarAccess.getEvaluationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionDefinition
entryRuleFunctionDefinition 
:
{ before(grammarAccess.getFunctionDefinitionRule()); }
	 ruleFunctionDefinition
{ after(grammarAccess.getFunctionDefinitionRule()); } 
	 EOF 
;

// Rule FunctionDefinition
ruleFunctionDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionDefinitionAccess().getGroup()); }
(rule__FunctionDefinition__Group__0)
{ after(grammarAccess.getFunctionDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getExpAssignment()); }
(rule__Expression__ExpAssignment)
{ after(grammarAccess.getExpressionAccess().getExpAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFirstLevelExp
entryRuleFirstLevelExp 
:
{ before(grammarAccess.getFirstLevelExpRule()); }
	 ruleFirstLevelExp
{ after(grammarAccess.getFirstLevelExpRule()); } 
	 EOF 
;

// Rule FirstLevelExp
ruleFirstLevelExp
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFirstLevelExpAccess().getGroup()); }
(rule__FirstLevelExp__Group__0)
{ after(grammarAccess.getFirstLevelExpAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSecondLevelExp
entryRuleSecondLevelExp 
:
{ before(grammarAccess.getSecondLevelExpRule()); }
	 ruleSecondLevelExp
{ after(grammarAccess.getSecondLevelExpRule()); } 
	 EOF 
;

// Rule SecondLevelExp
ruleSecondLevelExp
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSecondLevelExpAccess().getGroup()); }
(rule__SecondLevelExp__Group__0)
{ after(grammarAccess.getSecondLevelExpAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleThirdLevelExp
entryRuleThirdLevelExp 
:
{ before(grammarAccess.getThirdLevelExpRule()); }
	 ruleThirdLevelExp
{ after(grammarAccess.getThirdLevelExpRule()); } 
	 EOF 
;

// Rule ThirdLevelExp
ruleThirdLevelExp
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getThirdLevelExpAccess().getGroup()); }
(rule__ThirdLevelExp__Group__0)
{ after(grammarAccess.getThirdLevelExpAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFourthLevelExp
entryRuleFourthLevelExp 
:
{ before(grammarAccess.getFourthLevelExpRule()); }
	 ruleFourthLevelExp
{ after(grammarAccess.getFourthLevelExpRule()); } 
	 EOF 
;

// Rule FourthLevelExp
ruleFourthLevelExp
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFourthLevelExpAccess().getGroup()); }
(rule__FourthLevelExp__Group__0)
{ after(grammarAccess.getFourthLevelExpAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTerm
entryRuleTerm 
:
{ before(grammarAccess.getTermRule()); }
	 ruleTerm
{ after(grammarAccess.getTermRule()); } 
	 EOF 
;

// Rule Term
ruleTerm
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTermAccess().getAlternatives()); }
(rule__Term__Alternatives)
{ after(grammarAccess.getTermAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBracketExpression
entryRuleBracketExpression 
:
{ before(grammarAccess.getBracketExpressionRule()); }
	 ruleBracketExpression
{ after(grammarAccess.getBracketExpressionRule()); } 
	 EOF 
;

// Rule BracketExpression
ruleBracketExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBracketExpressionAccess().getGroup()); }
(rule__BracketExpression__Group__0)
{ after(grammarAccess.getBracketExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMyInteger
entryRuleMyInteger 
:
{ before(grammarAccess.getMyIntegerRule()); }
	 ruleMyInteger
{ after(grammarAccess.getMyIntegerRule()); } 
	 EOF 
;

// Rule MyInteger
ruleMyInteger
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMyIntegerAccess().getAlternatives()); }
(rule__MyInteger__Alternatives)
{ after(grammarAccess.getMyIntegerAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePosInteger
entryRulePosInteger 
:
{ before(grammarAccess.getPosIntegerRule()); }
	 rulePosInteger
{ after(grammarAccess.getPosIntegerRule()); } 
	 EOF 
;

// Rule PosInteger
rulePosInteger
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPosIntegerAccess().getValAssignment()); }
(rule__PosInteger__ValAssignment)
{ after(grammarAccess.getPosIntegerAccess().getValAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNegInteger
entryRuleNegInteger 
:
{ before(grammarAccess.getNegIntegerRule()); }
	 ruleNegInteger
{ after(grammarAccess.getNegIntegerRule()); } 
	 EOF 
;

// Rule NegInteger
ruleNegInteger
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNegIntegerAccess().getGroup()); }
(rule__NegInteger__Group__0)
{ after(grammarAccess.getNegIntegerAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMyVariable
entryRuleMyVariable 
:
{ before(grammarAccess.getMyVariableRule()); }
	 ruleMyVariable
{ after(grammarAccess.getMyVariableRule()); } 
	 EOF 
;

// Rule MyVariable
ruleMyVariable
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMyVariableAccess().getAlternatives()); }
(rule__MyVariable__Alternatives)
{ after(grammarAccess.getMyVariableAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariable
entryRuleVariable 
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableAccess().getVarAssignment()); }
(rule__Variable__VarAssignment)
{ after(grammarAccess.getVariableAccess().getVarAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCastedVariable
entryRuleCastedVariable 
:
{ before(grammarAccess.getCastedVariableRule()); }
	 ruleCastedVariable
{ after(grammarAccess.getCastedVariableRule()); } 
	 EOF 
;

// Rule CastedVariable
ruleCastedVariable
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCastedVariableAccess().getGroup()); }
(rule__CastedVariable__Group__0)
{ after(grammarAccess.getCastedVariableAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMyBool
entryRuleMyBool 
:
{ before(grammarAccess.getMyBoolRule()); }
	 ruleMyBool
{ after(grammarAccess.getMyBoolRule()); } 
	 EOF 
;

// Rule MyBool
ruleMyBool
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMyBoolAccess().getAlternatives()); }
(rule__MyBool__Alternatives)
{ after(grammarAccess.getMyBoolAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePosBool
entryRulePosBool 
:
{ before(grammarAccess.getPosBoolRule()); }
	 rulePosBool
{ after(grammarAccess.getPosBoolRule()); } 
	 EOF 
;

// Rule PosBool
rulePosBool
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPosBoolAccess().getValAssignment()); }
(rule__PosBool__ValAssignment)
{ after(grammarAccess.getPosBoolAccess().getValAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNegBool
entryRuleNegBool 
:
{ before(grammarAccess.getNegBoolRule()); }
	 ruleNegBool
{ after(grammarAccess.getNegBoolRule()); } 
	 EOF 
;

// Rule NegBool
ruleNegBool
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNegBoolAccess().getGroup()); }
(rule__NegBool__Group__0)
{ after(grammarAccess.getNegBoolAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMyString
entryRuleMyString 
:
{ before(grammarAccess.getMyStringRule()); }
	 ruleMyString
{ after(grammarAccess.getMyStringRule()); } 
	 EOF 
;

// Rule MyString
ruleMyString
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMyStringAccess().getValAssignment()); }
(rule__MyString__ValAssignment)
{ after(grammarAccess.getMyStringAccess().getValAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIfControlFlow
entryRuleIfControlFlow 
:
{ before(grammarAccess.getIfControlFlowRule()); }
	 ruleIfControlFlow
{ after(grammarAccess.getIfControlFlowRule()); } 
	 EOF 
;

// Rule IfControlFlow
ruleIfControlFlow
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIfControlFlowAccess().getGroup()); }
(rule__IfControlFlow__Group__0)
{ after(grammarAccess.getIfControlFlowAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionCall
entryRuleFunctionCall 
:
{ before(grammarAccess.getFunctionCallRule()); }
	 ruleFunctionCall
{ after(grammarAccess.getFunctionCallRule()); } 
	 EOF 
;

// Rule FunctionCall
ruleFunctionCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionCallAccess().getAlternatives()); }
(rule__FunctionCall__Alternatives)
{ after(grammarAccess.getFunctionCallAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePreDefFunctionCall
entryRulePreDefFunctionCall 
:
{ before(grammarAccess.getPreDefFunctionCallRule()); }
	 rulePreDefFunctionCall
{ after(grammarAccess.getPreDefFunctionCallRule()); } 
	 EOF 
;

// Rule PreDefFunctionCall
rulePreDefFunctionCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPreDefFunctionCallAccess().getGroup()); }
(rule__PreDefFunctionCall__Group__0)
{ after(grammarAccess.getPreDefFunctionCallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUserDefFunctionCall
entryRuleUserDefFunctionCall 
:
{ before(grammarAccess.getUserDefFunctionCallRule()); }
	 ruleUserDefFunctionCall
{ after(grammarAccess.getUserDefFunctionCallRule()); } 
	 EOF 
;

// Rule UserDefFunctionCall
ruleUserDefFunctionCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUserDefFunctionCallAccess().getGroup()); }
(rule__UserDefFunctionCall__Group__0)
{ after(grammarAccess.getUserDefFunctionCallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleList
entryRuleList 
:
{ before(grammarAccess.getListRule()); }
	 ruleList
{ after(grammarAccess.getListRule()); } 
	 EOF 
;

// Rule List
ruleList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getListAccess().getGroup()); }
(rule__List__Group__0)
{ after(grammarAccess.getListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleListElem
entryRuleListElem 
:
{ before(grammarAccess.getListElemRule()); }
	 ruleListElem
{ after(grammarAccess.getListElemRule()); } 
	 EOF 
;

// Rule ListElem
ruleListElem
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getListElemAccess().getAlternatives()); }
(rule__ListElem__Alternatives)
{ after(grammarAccess.getListElemAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule Bool
ruleBool
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolAccess().getAlternatives()); }
(rule__Bool__Alternatives)
{ after(grammarAccess.getBoolAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule PDFunction
rulePDFunction
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPDFunctionAccess().getAlternatives()); }
(rule__PDFunction__Alternatives)
{ after(grammarAccess.getPDFunctionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule FirstLevelOp
ruleFirstLevelOp
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFirstLevelOpAccess().getAlternatives()); }
(rule__FirstLevelOp__Alternatives)
{ after(grammarAccess.getFirstLevelOpAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule SecondLevelOp
ruleSecondLevelOp
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSecondLevelOpAccess().getAlternatives()); }
(rule__SecondLevelOp__Alternatives)
{ after(grammarAccess.getSecondLevelOpAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule ThirdLevelOp
ruleThirdLevelOp
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getThirdLevelOpAccess().getAlternatives()); }
(rule__ThirdLevelOp__Alternatives)
{ after(grammarAccess.getThirdLevelOpAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule FourthLevelOp
ruleFourthLevelOp
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFourthLevelOpAccess().getAlternatives()); }
(rule__FourthLevelOp__Alternatives)
{ after(grammarAccess.getFourthLevelOpAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule CastedType
ruleCastedType
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastedTypeAccess().getAlternatives()); }
(rule__CastedType__Alternatives)
{ after(grammarAccess.getCastedTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Lista__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListaAccess().getDefinitionsAssignment_0()); }
(rule__Lista__DefinitionsAssignment_0)
{ after(grammarAccess.getListaAccess().getDefinitionsAssignment_0()); }
)

    |(
{ before(grammarAccess.getListaAccess().getEvaluationsAssignment_1()); }
(rule__Lista__EvaluationsAssignment_1)
{ after(grammarAccess.getListaAccess().getEvaluationsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getMyIntegerParserRuleCall_0()); }
	ruleMyInteger
{ after(grammarAccess.getTermAccess().getMyIntegerParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTermAccess().getMyStringParserRuleCall_1()); }
	ruleMyString
{ after(grammarAccess.getTermAccess().getMyStringParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getTermAccess().getMyBoolParserRuleCall_2()); }
	ruleMyBool
{ after(grammarAccess.getTermAccess().getMyBoolParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getTermAccess().getMyVariableParserRuleCall_3()); }
	ruleMyVariable
{ after(grammarAccess.getTermAccess().getMyVariableParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getTermAccess().getListParserRuleCall_4()); }
	ruleList
{ after(grammarAccess.getTermAccess().getListParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getTermAccess().getFunctionCallParserRuleCall_5()); }
	ruleFunctionCall
{ after(grammarAccess.getTermAccess().getFunctionCallParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getTermAccess().getIfControlFlowParserRuleCall_6()); }
	ruleIfControlFlow
{ after(grammarAccess.getTermAccess().getIfControlFlowParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getTermAccess().getBracketExpressionParserRuleCall_7()); }
	ruleBracketExpression
{ after(grammarAccess.getTermAccess().getBracketExpressionParserRuleCall_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MyInteger__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyIntegerAccess().getPosIntegerParserRuleCall_0()); }
	rulePosInteger
{ after(grammarAccess.getMyIntegerAccess().getPosIntegerParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getMyIntegerAccess().getNegIntegerParserRuleCall_1()); }
	ruleNegInteger
{ after(grammarAccess.getMyIntegerAccess().getNegIntegerParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NegInteger__ValAlternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegIntegerAccess().getValPosIntegerParserRuleCall_1_0_0()); }
	rulePosInteger
{ after(grammarAccess.getNegIntegerAccess().getValPosIntegerParserRuleCall_1_0_0()); }
)

    |(
{ before(grammarAccess.getNegIntegerAccess().getValBracketExpressionParserRuleCall_1_0_1()); }
	ruleBracketExpression
{ after(grammarAccess.getNegIntegerAccess().getValBracketExpressionParserRuleCall_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MyVariable__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyVariableAccess().getVariableParserRuleCall_0()); }
	ruleVariable
{ after(grammarAccess.getMyVariableAccess().getVariableParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getMyVariableAccess().getCastedVariableParserRuleCall_1()); }
	ruleCastedVariable
{ after(grammarAccess.getMyVariableAccess().getCastedVariableParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MyBool__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyBoolAccess().getPosBoolParserRuleCall_0()); }
	rulePosBool
{ after(grammarAccess.getMyBoolAccess().getPosBoolParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getMyBoolAccess().getNegBoolParserRuleCall_1()); }
	ruleNegBool
{ after(grammarAccess.getMyBoolAccess().getNegBoolParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NegBool__ValAlternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegBoolAccess().getValPosBoolParserRuleCall_1_0_0()); }
	rulePosBool
{ after(grammarAccess.getNegBoolAccess().getValPosBoolParserRuleCall_1_0_0()); }
)

    |(
{ before(grammarAccess.getNegBoolAccess().getValBracketExpressionParserRuleCall_1_0_1()); }
	ruleBracketExpression
{ after(grammarAccess.getNegBoolAccess().getValBracketExpressionParserRuleCall_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getPreDefFunctionCallParserRuleCall_0()); }
	rulePreDefFunctionCall
{ after(grammarAccess.getFunctionCallAccess().getPreDefFunctionCallParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getFunctionCallAccess().getUserDefFunctionCallParserRuleCall_1()); }
	ruleUserDefFunctionCall
{ after(grammarAccess.getFunctionCallAccess().getUserDefFunctionCallParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ListElem__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListElemAccess().getMyIntegerParserRuleCall_0()); }
	ruleMyInteger
{ after(grammarAccess.getListElemAccess().getMyIntegerParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getListElemAccess().getMyVariableParserRuleCall_1()); }
	ruleMyVariable
{ after(grammarAccess.getListElemAccess().getMyVariableParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolAccess().getTrueEnumLiteralDeclaration_0()); }
(	'true' 
)
{ after(grammarAccess.getBoolAccess().getTrueEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getBoolAccess().getFalseEnumLiteralDeclaration_1()); }
(	'false' 
)
{ after(grammarAccess.getBoolAccess().getFalseEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PDFunction__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPDFunctionAccess().getLengthEnumLiteralDeclaration_0()); }
(	'length' 
)
{ after(grammarAccess.getPDFunctionAccess().getLengthEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getPDFunctionAccess().getConsEnumLiteralDeclaration_1()); }
(	'cons' 
)
{ after(grammarAccess.getPDFunctionAccess().getConsEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getPDFunctionAccess().getCarEnumLiteralDeclaration_2()); }
(	'car' 
)
{ after(grammarAccess.getPDFunctionAccess().getCarEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getPDFunctionAccess().getCdrEnumLiteralDeclaration_3()); }
(	'cdr' 
)
{ after(grammarAccess.getPDFunctionAccess().getCdrEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getPDFunctionAccess().getIsEmptyEnumLiteralDeclaration_4()); }
(	'isEmpty' 
)
{ after(grammarAccess.getPDFunctionAccess().getIsEmptyEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getPDFunctionAccess().getShowEnumLiteralDeclaration_5()); }
(	'show' 
)
{ after(grammarAccess.getPDFunctionAccess().getShowEnumLiteralDeclaration_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FirstLevelOp__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFirstLevelOpAccess().getAndEnumLiteralDeclaration_0()); }
(	'&' 
)
{ after(grammarAccess.getFirstLevelOpAccess().getAndEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getFirstLevelOpAccess().getOrEnumLiteralDeclaration_1()); }
(	'|' 
)
{ after(grammarAccess.getFirstLevelOpAccess().getOrEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SecondLevelOp__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSecondLevelOpAccess().getGtEnumLiteralDeclaration_0()); }
(	'>' 
)
{ after(grammarAccess.getSecondLevelOpAccess().getGtEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getSecondLevelOpAccess().getLtEnumLiteralDeclaration_1()); }
(	'<' 
)
{ after(grammarAccess.getSecondLevelOpAccess().getLtEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getSecondLevelOpAccess().getEqEnumLiteralDeclaration_2()); }
(	'==' 
)
{ after(grammarAccess.getSecondLevelOpAccess().getEqEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ThirdLevelOp__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getThirdLevelOpAccess().getPlusEnumLiteralDeclaration_0()); }
(	'+' 
)
{ after(grammarAccess.getThirdLevelOpAccess().getPlusEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getThirdLevelOpAccess().getMinusEnumLiteralDeclaration_1()); }
(	'-' 
)
{ after(grammarAccess.getThirdLevelOpAccess().getMinusEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getThirdLevelOpAccess().getConcatEnumLiteralDeclaration_2()); }
(	'++' 
)
{ after(grammarAccess.getThirdLevelOpAccess().getConcatEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FourthLevelOp__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFourthLevelOpAccess().getMultEnumLiteralDeclaration_0()); }
(	'*' 
)
{ after(grammarAccess.getFourthLevelOpAccess().getMultEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getFourthLevelOpAccess().getDivEnumLiteralDeclaration_1()); }
(	'/' 
)
{ after(grammarAccess.getFourthLevelOpAccess().getDivEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CastedType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastedTypeAccess().getIntEnumLiteralDeclaration_0()); }
(	'int' 
)
{ after(grammarAccess.getCastedTypeAccess().getIntEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getCastedTypeAccess().getBoolEnumLiteralDeclaration_1()); }
(	'bool' 
)
{ after(grammarAccess.getCastedTypeAccess().getBoolEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getCastedTypeAccess().getStringEnumLiteralDeclaration_2()); }
(	'string' 
)
{ after(grammarAccess.getCastedTypeAccess().getStringEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Evaluation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Evaluation__Group__0__Impl
	rule__Evaluation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Evaluation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEvaluationAccess().getQuestionMarkKeyword_0()); }

	'?' 

{ after(grammarAccess.getEvaluationAccess().getQuestionMarkKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Evaluation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Evaluation__Group__1__Impl
	rule__Evaluation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Evaluation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEvaluationAccess().getReturnAssignment_1()); }
(rule__Evaluation__ReturnAssignment_1)
{ after(grammarAccess.getEvaluationAccess().getReturnAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Evaluation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Evaluation__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Evaluation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEvaluationAccess().getSemicolonKeyword_2()); }

	';' 

{ after(grammarAccess.getEvaluationAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FunctionDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDefinition__Group__0__Impl
	rule__FunctionDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDefinitionAccess().getNameAssignment_0()); }
(rule__FunctionDefinition__NameAssignment_0)
{ after(grammarAccess.getFunctionDefinitionAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDefinition__Group__1__Impl
	rule__FunctionDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDefinitionAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getFunctionDefinitionAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDefinition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDefinition__Group__2__Impl
	rule__FunctionDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDefinitionAccess().getGroup_2()); }
(rule__FunctionDefinition__Group_2__0)?
{ after(grammarAccess.getFunctionDefinitionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDefinition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDefinition__Group__3__Impl
	rule__FunctionDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDefinitionAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getFunctionDefinitionAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDefinition__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDefinition__Group__4__Impl
	rule__FunctionDefinition__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDefinitionAccess().getEqualsSignKeyword_4()); }

	'=' 

{ after(grammarAccess.getFunctionDefinitionAccess().getEqualsSignKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDefinition__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDefinition__Group__5__Impl
	rule__FunctionDefinition__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDefinitionAccess().getReturnAssignment_5()); }
(rule__FunctionDefinition__ReturnAssignment_5)
{ after(grammarAccess.getFunctionDefinitionAccess().getReturnAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDefinition__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDefinition__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDefinitionAccess().getSemicolonKeyword_6()); }

	';' 

{ after(grammarAccess.getFunctionDefinitionAccess().getSemicolonKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__FunctionDefinition__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDefinition__Group_2__0__Impl
	rule__FunctionDefinition__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDefinitionAccess().getParamsAssignment_2_0()); }
(rule__FunctionDefinition__ParamsAssignment_2_0)
{ after(grammarAccess.getFunctionDefinitionAccess().getParamsAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDefinition__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDefinition__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDefinitionAccess().getGroup_2_1()); }
(rule__FunctionDefinition__Group_2_1__0)*
{ after(grammarAccess.getFunctionDefinitionAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionDefinition__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDefinition__Group_2_1__0__Impl
	rule__FunctionDefinition__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDefinitionAccess().getCommaKeyword_2_1_0()); }

	',' 

{ after(grammarAccess.getFunctionDefinitionAccess().getCommaKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDefinition__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDefinition__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDefinitionAccess().getParamsAssignment_2_1_1()); }
(rule__FunctionDefinition__ParamsAssignment_2_1_1)
{ after(grammarAccess.getFunctionDefinitionAccess().getParamsAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FirstLevelExp__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FirstLevelExp__Group__0__Impl
	rule__FirstLevelExp__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FirstLevelExp__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFirstLevelExpAccess().getArgsAssignment_0()); }
(rule__FirstLevelExp__ArgsAssignment_0)
{ after(grammarAccess.getFirstLevelExpAccess().getArgsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FirstLevelExp__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FirstLevelExp__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FirstLevelExp__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFirstLevelExpAccess().getGroup_1()); }
(rule__FirstLevelExp__Group_1__0)?
{ after(grammarAccess.getFirstLevelExpAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FirstLevelExp__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FirstLevelExp__Group_1__0__Impl
	rule__FirstLevelExp__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FirstLevelExp__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFirstLevelExpAccess().getOpAssignment_1_0()); }
(rule__FirstLevelExp__OpAssignment_1_0)
{ after(grammarAccess.getFirstLevelExpAccess().getOpAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FirstLevelExp__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FirstLevelExp__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FirstLevelExp__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFirstLevelExpAccess().getArgsAssignment_1_1()); }
(rule__FirstLevelExp__ArgsAssignment_1_1)
{ after(grammarAccess.getFirstLevelExpAccess().getArgsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SecondLevelExp__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SecondLevelExp__Group__0__Impl
	rule__SecondLevelExp__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SecondLevelExp__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSecondLevelExpAccess().getArgsAssignment_0()); }
(rule__SecondLevelExp__ArgsAssignment_0)
{ after(grammarAccess.getSecondLevelExpAccess().getArgsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SecondLevelExp__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SecondLevelExp__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SecondLevelExp__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSecondLevelExpAccess().getGroup_1()); }
(rule__SecondLevelExp__Group_1__0)?
{ after(grammarAccess.getSecondLevelExpAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SecondLevelExp__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SecondLevelExp__Group_1__0__Impl
	rule__SecondLevelExp__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SecondLevelExp__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSecondLevelExpAccess().getOpAssignment_1_0()); }
(rule__SecondLevelExp__OpAssignment_1_0)
{ after(grammarAccess.getSecondLevelExpAccess().getOpAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SecondLevelExp__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SecondLevelExp__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SecondLevelExp__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSecondLevelExpAccess().getArgsAssignment_1_1()); }
(rule__SecondLevelExp__ArgsAssignment_1_1)
{ after(grammarAccess.getSecondLevelExpAccess().getArgsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ThirdLevelExp__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ThirdLevelExp__Group__0__Impl
	rule__ThirdLevelExp__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ThirdLevelExp__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getThirdLevelExpAccess().getArgsAssignment_0()); }
(rule__ThirdLevelExp__ArgsAssignment_0)
{ after(grammarAccess.getThirdLevelExpAccess().getArgsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ThirdLevelExp__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ThirdLevelExp__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ThirdLevelExp__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getThirdLevelExpAccess().getGroup_1()); }
(rule__ThirdLevelExp__Group_1__0)?
{ after(grammarAccess.getThirdLevelExpAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ThirdLevelExp__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ThirdLevelExp__Group_1__0__Impl
	rule__ThirdLevelExp__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ThirdLevelExp__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getThirdLevelExpAccess().getOpAssignment_1_0()); }
(rule__ThirdLevelExp__OpAssignment_1_0)
{ after(grammarAccess.getThirdLevelExpAccess().getOpAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ThirdLevelExp__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ThirdLevelExp__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ThirdLevelExp__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getThirdLevelExpAccess().getArgsAssignment_1_1()); }
(rule__ThirdLevelExp__ArgsAssignment_1_1)
{ after(grammarAccess.getThirdLevelExpAccess().getArgsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FourthLevelExp__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FourthLevelExp__Group__0__Impl
	rule__FourthLevelExp__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FourthLevelExp__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFourthLevelExpAccess().getArgsAssignment_0()); }
(rule__FourthLevelExp__ArgsAssignment_0)
{ after(grammarAccess.getFourthLevelExpAccess().getArgsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FourthLevelExp__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FourthLevelExp__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FourthLevelExp__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFourthLevelExpAccess().getGroup_1()); }
(rule__FourthLevelExp__Group_1__0)?
{ after(grammarAccess.getFourthLevelExpAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FourthLevelExp__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FourthLevelExp__Group_1__0__Impl
	rule__FourthLevelExp__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FourthLevelExp__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFourthLevelExpAccess().getOpAssignment_1_0()); }
(rule__FourthLevelExp__OpAssignment_1_0)
{ after(grammarAccess.getFourthLevelExpAccess().getOpAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FourthLevelExp__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FourthLevelExp__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FourthLevelExp__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFourthLevelExpAccess().getArgsAssignment_1_1()); }
(rule__FourthLevelExp__ArgsAssignment_1_1)
{ after(grammarAccess.getFourthLevelExpAccess().getArgsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BracketExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BracketExpression__Group__0__Impl
	rule__BracketExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BracketExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBracketExpressionAccess().getLeftParenthesisKeyword_0()); }

	'(' 

{ after(grammarAccess.getBracketExpressionAccess().getLeftParenthesisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BracketExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BracketExpression__Group__1__Impl
	rule__BracketExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BracketExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBracketExpressionAccess().getExpAssignment_1()); }
(rule__BracketExpression__ExpAssignment_1)
{ after(grammarAccess.getBracketExpressionAccess().getExpAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BracketExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BracketExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BracketExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBracketExpressionAccess().getRightParenthesisKeyword_2()); }

	')' 

{ after(grammarAccess.getBracketExpressionAccess().getRightParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NegInteger__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NegInteger__Group__0__Impl
	rule__NegInteger__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NegInteger__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegIntegerAccess().getHyphenMinusKeyword_0()); }

	'-' 

{ after(grammarAccess.getNegIntegerAccess().getHyphenMinusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NegInteger__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NegInteger__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NegInteger__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegIntegerAccess().getValAssignment_1()); }
(rule__NegInteger__ValAssignment_1)
{ after(grammarAccess.getNegIntegerAccess().getValAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CastedVariable__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CastedVariable__Group__0__Impl
	rule__CastedVariable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CastedVariable__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastedVariableAccess().getVarAssignment_0()); }
(rule__CastedVariable__VarAssignment_0)
{ after(grammarAccess.getCastedVariableAccess().getVarAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CastedVariable__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CastedVariable__Group__1__Impl
	rule__CastedVariable__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CastedVariable__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastedVariableAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getCastedVariableAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CastedVariable__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CastedVariable__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CastedVariable__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastedVariableAccess().getTypeAssignment_2()); }
(rule__CastedVariable__TypeAssignment_2)
{ after(grammarAccess.getCastedVariableAccess().getTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NegBool__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NegBool__Group__0__Impl
	rule__NegBool__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NegBool__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegBoolAccess().getExclamationMarkKeyword_0()); }

	'!' 

{ after(grammarAccess.getNegBoolAccess().getExclamationMarkKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NegBool__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NegBool__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NegBool__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegBoolAccess().getValAssignment_1()); }
(rule__NegBool__ValAssignment_1)
{ after(grammarAccess.getNegBoolAccess().getValAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IfControlFlow__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfControlFlow__Group__0__Impl
	rule__IfControlFlow__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfControlFlow__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfControlFlowAccess().getIfKeyword_0()); }

	'if' 

{ after(grammarAccess.getIfControlFlowAccess().getIfKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfControlFlow__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfControlFlow__Group__1__Impl
	rule__IfControlFlow__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfControlFlow__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfControlFlowAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getIfControlFlowAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfControlFlow__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfControlFlow__Group__2__Impl
	rule__IfControlFlow__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfControlFlow__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfControlFlowAccess().getCondAssignment_2()); }
(rule__IfControlFlow__CondAssignment_2)
{ after(grammarAccess.getIfControlFlowAccess().getCondAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfControlFlow__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfControlFlow__Group__3__Impl
	rule__IfControlFlow__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfControlFlow__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfControlFlowAccess().getCommaKeyword_3()); }

	',' 

{ after(grammarAccess.getIfControlFlowAccess().getCommaKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfControlFlow__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfControlFlow__Group__4__Impl
	rule__IfControlFlow__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IfControlFlow__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfControlFlowAccess().getIftrueAssignment_4()); }
(rule__IfControlFlow__IftrueAssignment_4)
{ after(grammarAccess.getIfControlFlowAccess().getIftrueAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfControlFlow__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfControlFlow__Group__5__Impl
	rule__IfControlFlow__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__IfControlFlow__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfControlFlowAccess().getCommaKeyword_5()); }

	',' 

{ after(grammarAccess.getIfControlFlowAccess().getCommaKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfControlFlow__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfControlFlow__Group__6__Impl
	rule__IfControlFlow__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__IfControlFlow__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfControlFlowAccess().getIffalseAssignment_6()); }
(rule__IfControlFlow__IffalseAssignment_6)
{ after(grammarAccess.getIfControlFlowAccess().getIffalseAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfControlFlow__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfControlFlow__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfControlFlow__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfControlFlowAccess().getRightParenthesisKeyword_7()); }

	')' 

{ after(grammarAccess.getIfControlFlowAccess().getRightParenthesisKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__PreDefFunctionCall__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PreDefFunctionCall__Group__0__Impl
	rule__PreDefFunctionCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PreDefFunctionCall__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreDefFunctionCallAccess().getFunctionAssignment_0()); }
(rule__PreDefFunctionCall__FunctionAssignment_0)
{ after(grammarAccess.getPreDefFunctionCallAccess().getFunctionAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PreDefFunctionCall__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PreDefFunctionCall__Group__1__Impl
	rule__PreDefFunctionCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PreDefFunctionCall__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreDefFunctionCallAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getPreDefFunctionCallAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PreDefFunctionCall__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PreDefFunctionCall__Group__2__Impl
	rule__PreDefFunctionCall__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PreDefFunctionCall__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreDefFunctionCallAccess().getGroup_2()); }
(rule__PreDefFunctionCall__Group_2__0)?
{ after(grammarAccess.getPreDefFunctionCallAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PreDefFunctionCall__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PreDefFunctionCall__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PreDefFunctionCall__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreDefFunctionCallAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getPreDefFunctionCallAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__PreDefFunctionCall__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PreDefFunctionCall__Group_2__0__Impl
	rule__PreDefFunctionCall__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PreDefFunctionCall__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreDefFunctionCallAccess().getArgsAssignment_2_0()); }
(rule__PreDefFunctionCall__ArgsAssignment_2_0)
{ after(grammarAccess.getPreDefFunctionCallAccess().getArgsAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PreDefFunctionCall__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PreDefFunctionCall__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PreDefFunctionCall__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreDefFunctionCallAccess().getGroup_2_1()); }
(rule__PreDefFunctionCall__Group_2_1__0)*
{ after(grammarAccess.getPreDefFunctionCallAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PreDefFunctionCall__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PreDefFunctionCall__Group_2_1__0__Impl
	rule__PreDefFunctionCall__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PreDefFunctionCall__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreDefFunctionCallAccess().getCommaKeyword_2_1_0()); }

	',' 

{ after(grammarAccess.getPreDefFunctionCallAccess().getCommaKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PreDefFunctionCall__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PreDefFunctionCall__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PreDefFunctionCall__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreDefFunctionCallAccess().getArgsAssignment_2_1_1()); }
(rule__PreDefFunctionCall__ArgsAssignment_2_1_1)
{ after(grammarAccess.getPreDefFunctionCallAccess().getArgsAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UserDefFunctionCall__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UserDefFunctionCall__Group__0__Impl
	rule__UserDefFunctionCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UserDefFunctionCall__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUserDefFunctionCallAccess().getFunctionAssignment_0()); }
(rule__UserDefFunctionCall__FunctionAssignment_0)
{ after(grammarAccess.getUserDefFunctionCallAccess().getFunctionAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UserDefFunctionCall__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UserDefFunctionCall__Group__1__Impl
	rule__UserDefFunctionCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UserDefFunctionCall__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUserDefFunctionCallAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getUserDefFunctionCallAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UserDefFunctionCall__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UserDefFunctionCall__Group__2__Impl
	rule__UserDefFunctionCall__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__UserDefFunctionCall__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUserDefFunctionCallAccess().getGroup_2()); }
(rule__UserDefFunctionCall__Group_2__0)?
{ after(grammarAccess.getUserDefFunctionCallAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UserDefFunctionCall__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UserDefFunctionCall__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UserDefFunctionCall__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUserDefFunctionCallAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getUserDefFunctionCallAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__UserDefFunctionCall__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UserDefFunctionCall__Group_2__0__Impl
	rule__UserDefFunctionCall__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UserDefFunctionCall__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUserDefFunctionCallAccess().getArgsAssignment_2_0()); }
(rule__UserDefFunctionCall__ArgsAssignment_2_0)
{ after(grammarAccess.getUserDefFunctionCallAccess().getArgsAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UserDefFunctionCall__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UserDefFunctionCall__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UserDefFunctionCall__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUserDefFunctionCallAccess().getGroup_2_1()); }
(rule__UserDefFunctionCall__Group_2_1__0)*
{ after(grammarAccess.getUserDefFunctionCallAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UserDefFunctionCall__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UserDefFunctionCall__Group_2_1__0__Impl
	rule__UserDefFunctionCall__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UserDefFunctionCall__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUserDefFunctionCallAccess().getCommaKeyword_2_1_0()); }

	',' 

{ after(grammarAccess.getUserDefFunctionCallAccess().getCommaKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UserDefFunctionCall__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UserDefFunctionCall__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UserDefFunctionCall__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUserDefFunctionCallAccess().getArgsAssignment_2_1_1()); }
(rule__UserDefFunctionCall__ArgsAssignment_2_1_1)
{ after(grammarAccess.getUserDefFunctionCallAccess().getArgsAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__List__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__List__Group__0__Impl
	rule__List__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListAccess().getLeftSquareBracketKeyword_0()); }

	'[' 

{ after(grammarAccess.getListAccess().getLeftSquareBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__List__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__List__Group__1__Impl
	rule__List__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListAccess().getListAction_1()); }
(

)
{ after(grammarAccess.getListAccess().getListAction_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__List__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__List__Group__2__Impl
	rule__List__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListAccess().getGroup_2()); }
(rule__List__Group_2__0)?
{ after(grammarAccess.getListAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__List__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__List__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListAccess().getRightSquareBracketKeyword_3()); }

	']' 

{ after(grammarAccess.getListAccess().getRightSquareBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__List__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__List__Group_2__0__Impl
	rule__List__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getListAccess().getElemsAssignment_2_0()); }
(rule__List__ElemsAssignment_2_0)
{ after(grammarAccess.getListAccess().getElemsAssignment_2_0()); }
)
(
{ before(grammarAccess.getListAccess().getElemsAssignment_2_0()); }
(rule__List__ElemsAssignment_2_0)*
{ after(grammarAccess.getListAccess().getElemsAssignment_2_0()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__List__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__List__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListAccess().getGroup_2_1()); }
(rule__List__Group_2_1__0)*
{ after(grammarAccess.getListAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__List__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__List__Group_2_1__0__Impl
	rule__List__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListAccess().getCommaKeyword_2_1_0()); }

	',' 

{ after(grammarAccess.getListAccess().getCommaKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__List__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__List__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListAccess().getElemsAssignment_2_1_1()); }
(rule__List__ElemsAssignment_2_1_1)
{ after(grammarAccess.getListAccess().getElemsAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Lista__DefinitionsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListaAccess().getDefinitionsFunctionDefinitionParserRuleCall_0_0()); }
	ruleFunctionDefinition{ after(grammarAccess.getListaAccess().getDefinitionsFunctionDefinitionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Lista__EvaluationsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListaAccess().getEvaluationsEvaluationParserRuleCall_1_0()); }
	ruleEvaluation{ after(grammarAccess.getListaAccess().getEvaluationsEvaluationParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Evaluation__ReturnAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEvaluationAccess().getReturnExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getEvaluationAccess().getReturnExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDefinitionAccess().getNameIDFUNCVARTerminalRuleCall_0_0()); }
	RULE_IDFUNCVAR{ after(grammarAccess.getFunctionDefinitionAccess().getNameIDFUNCVARTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__ParamsAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDefinitionAccess().getParamsIDFUNCVARTerminalRuleCall_2_0_0()); }
	RULE_IDFUNCVAR{ after(grammarAccess.getFunctionDefinitionAccess().getParamsIDFUNCVARTerminalRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__ParamsAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDefinitionAccess().getParamsIDFUNCVARTerminalRuleCall_2_1_1_0()); }
	RULE_IDFUNCVAR{ after(grammarAccess.getFunctionDefinitionAccess().getParamsIDFUNCVARTerminalRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__ReturnAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDefinitionAccess().getReturnExpressionParserRuleCall_5_0()); }
	ruleExpression{ after(grammarAccess.getFunctionDefinitionAccess().getReturnExpressionParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__ExpAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getExpFirstLevelExpParserRuleCall_0()); }
	ruleFirstLevelExp{ after(grammarAccess.getExpressionAccess().getExpFirstLevelExpParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FirstLevelExp__ArgsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFirstLevelExpAccess().getArgsSecondLevelExpParserRuleCall_0_0()); }
	ruleSecondLevelExp{ after(grammarAccess.getFirstLevelExpAccess().getArgsSecondLevelExpParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FirstLevelExp__OpAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFirstLevelExpAccess().getOpFirstLevelOpEnumRuleCall_1_0_0()); }
	ruleFirstLevelOp{ after(grammarAccess.getFirstLevelExpAccess().getOpFirstLevelOpEnumRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FirstLevelExp__ArgsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFirstLevelExpAccess().getArgsFirstLevelExpParserRuleCall_1_1_0()); }
	ruleFirstLevelExp{ after(grammarAccess.getFirstLevelExpAccess().getArgsFirstLevelExpParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SecondLevelExp__ArgsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSecondLevelExpAccess().getArgsThirdLevelExpParserRuleCall_0_0()); }
	ruleThirdLevelExp{ after(grammarAccess.getSecondLevelExpAccess().getArgsThirdLevelExpParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SecondLevelExp__OpAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSecondLevelExpAccess().getOpSecondLevelOpEnumRuleCall_1_0_0()); }
	ruleSecondLevelOp{ after(grammarAccess.getSecondLevelExpAccess().getOpSecondLevelOpEnumRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SecondLevelExp__ArgsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSecondLevelExpAccess().getArgsSecondLevelExpParserRuleCall_1_1_0()); }
	ruleSecondLevelExp{ after(grammarAccess.getSecondLevelExpAccess().getArgsSecondLevelExpParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ThirdLevelExp__ArgsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getThirdLevelExpAccess().getArgsFourthLevelExpParserRuleCall_0_0()); }
	ruleFourthLevelExp{ after(grammarAccess.getThirdLevelExpAccess().getArgsFourthLevelExpParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ThirdLevelExp__OpAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getThirdLevelExpAccess().getOpThirdLevelOpEnumRuleCall_1_0_0()); }
	ruleThirdLevelOp{ after(grammarAccess.getThirdLevelExpAccess().getOpThirdLevelOpEnumRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ThirdLevelExp__ArgsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getThirdLevelExpAccess().getArgsThirdLevelExpParserRuleCall_1_1_0()); }
	ruleThirdLevelExp{ after(grammarAccess.getThirdLevelExpAccess().getArgsThirdLevelExpParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FourthLevelExp__ArgsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFourthLevelExpAccess().getArgsTermParserRuleCall_0_0()); }
	ruleTerm{ after(grammarAccess.getFourthLevelExpAccess().getArgsTermParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FourthLevelExp__OpAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFourthLevelExpAccess().getOpFourthLevelOpEnumRuleCall_1_0_0()); }
	ruleFourthLevelOp{ after(grammarAccess.getFourthLevelExpAccess().getOpFourthLevelOpEnumRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FourthLevelExp__ArgsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFourthLevelExpAccess().getArgsFourthLevelExpParserRuleCall_1_1_0()); }
	ruleFourthLevelExp{ after(grammarAccess.getFourthLevelExpAccess().getArgsFourthLevelExpParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BracketExpression__ExpAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBracketExpressionAccess().getExpExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getBracketExpressionAccess().getExpExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PosInteger__ValAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPosIntegerAccess().getValINTTerminalRuleCall_0()); }
	RULE_INT{ after(grammarAccess.getPosIntegerAccess().getValINTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NegInteger__ValAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegIntegerAccess().getValAlternatives_1_0()); }
(rule__NegInteger__ValAlternatives_1_0)
{ after(grammarAccess.getNegIntegerAccess().getValAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__VarAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getVarIDFUNCVARTerminalRuleCall_0()); }
	RULE_IDFUNCVAR{ after(grammarAccess.getVariableAccess().getVarIDFUNCVARTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CastedVariable__VarAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastedVariableAccess().getVarIDFUNCVARTerminalRuleCall_0_0()); }
	RULE_IDFUNCVAR{ after(grammarAccess.getCastedVariableAccess().getVarIDFUNCVARTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CastedVariable__TypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastedVariableAccess().getTypeCastedTypeEnumRuleCall_2_0()); }
	ruleCastedType{ after(grammarAccess.getCastedVariableAccess().getTypeCastedTypeEnumRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PosBool__ValAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPosBoolAccess().getValBoolEnumRuleCall_0()); }
	ruleBool{ after(grammarAccess.getPosBoolAccess().getValBoolEnumRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NegBool__ValAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegBoolAccess().getValAlternatives_1_0()); }
(rule__NegBool__ValAlternatives_1_0)
{ after(grammarAccess.getNegBoolAccess().getValAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MyString__ValAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMyStringAccess().getValSTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getMyStringAccess().getValSTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfControlFlow__CondAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfControlFlowAccess().getCondExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getIfControlFlowAccess().getCondExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfControlFlow__IftrueAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfControlFlowAccess().getIftrueExpressionParserRuleCall_4_0()); }
	ruleExpression{ after(grammarAccess.getIfControlFlowAccess().getIftrueExpressionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfControlFlow__IffalseAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfControlFlowAccess().getIffalseExpressionParserRuleCall_6_0()); }
	ruleExpression{ after(grammarAccess.getIfControlFlowAccess().getIffalseExpressionParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PreDefFunctionCall__FunctionAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreDefFunctionCallAccess().getFunctionPDFunctionEnumRuleCall_0_0()); }
	rulePDFunction{ after(grammarAccess.getPreDefFunctionCallAccess().getFunctionPDFunctionEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PreDefFunctionCall__ArgsAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreDefFunctionCallAccess().getArgsExpressionParserRuleCall_2_0_0()); }
	ruleExpression{ after(grammarAccess.getPreDefFunctionCallAccess().getArgsExpressionParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PreDefFunctionCall__ArgsAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreDefFunctionCallAccess().getArgsExpressionParserRuleCall_2_1_1_0()); }
	ruleExpression{ after(grammarAccess.getPreDefFunctionCallAccess().getArgsExpressionParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UserDefFunctionCall__FunctionAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUserDefFunctionCallAccess().getFunctionFunctionDefinitionCrossReference_0_0()); }
(
{ before(grammarAccess.getUserDefFunctionCallAccess().getFunctionFunctionDefinitionIDFUNCVARTerminalRuleCall_0_0_1()); }
	RULE_IDFUNCVAR{ after(grammarAccess.getUserDefFunctionCallAccess().getFunctionFunctionDefinitionIDFUNCVARTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getUserDefFunctionCallAccess().getFunctionFunctionDefinitionCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UserDefFunctionCall__ArgsAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUserDefFunctionCallAccess().getArgsExpressionParserRuleCall_2_0_0()); }
	ruleExpression{ after(grammarAccess.getUserDefFunctionCallAccess().getArgsExpressionParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UserDefFunctionCall__ArgsAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUserDefFunctionCallAccess().getArgsExpressionParserRuleCall_2_1_1_0()); }
	ruleExpression{ after(grammarAccess.getUserDefFunctionCallAccess().getArgsExpressionParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__List__ElemsAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListAccess().getElemsListElemParserRuleCall_2_0_0()); }
	ruleListElem{ after(grammarAccess.getListAccess().getElemsListElemParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__List__ElemsAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListAccess().getElemsListElemParserRuleCall_2_1_1_0()); }
	ruleListElem{ after(grammarAccess.getListAccess().getElemsListElemParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_IDFUNCVAR : ('a'..'z'|'A'..'Z') ('A'..'Z'|'a'..'z'|'0'..'9')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


